/* The following code was generated by JFlex 1.4.1 on 2/18/25, 2:23â€¯AM */

/*
 * ORIGINAL VERSION SOURCE LINK
 * https://github.com/logisim-evolution/
 *
 *
 * THIS IS MY VERSION
 * File current version https://github.com/Var7600/VHDL_GENERATOR
 *
 *
 * VhdlTokenMaker.java - Scanner for the VHDL hardware description language.
 *
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;



/**
 * A parser for the VHDL hardware description programming language.
 *
 * @author DOUDOU DIAWARA
 * @version 0.0
 *
 */

public class VhdlTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\0\1\11"+
    "\3\0\1\55\1\46\1\50\1\50\1\56\1\13\1\50\1\12\2\0"+
    "\1\5\1\17\6\21\2\4\1\51\1\50\1\54\1\52\1\53\2\0"+
    "\1\23\1\16\1\24\1\6\1\15\1\26\1\36\1\33\1\32\1\44"+
    "\1\40\1\31\1\41\1\37\1\20\1\42\1\47\1\30\1\25\1\27"+
    "\1\34\1\45\1\43\1\22\1\35\1\7\1\50\1\0\1\50\1\0"+
    "\1\10\1\0\1\23\1\16\1\24\1\6\1\15\1\26\1\36\1\33"+
    "\1\32\1\44\1\40\1\31\1\41\1\37\1\20\1\42\1\47\1\30"+
    "\1\25\1\27\1\34\1\45\1\43\1\22\1\35\1\7\1\0\1\14"+
    "\uff83\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\2\4\2\5\3\1"+
    "\1\6\23\5\1\1\1\6\2\1\1\7\1\1\4\0"+
    "\2\5\1\0\1\10\1\11\1\0\3\5\1\0\5\5"+
    "\1\0\1\12\1\5\1\7\2\5\1\0\37\5\1\12"+
    "\22\5\16\0\1\13\2\0\1\13\1\0\4\5\1\0"+
    "\4\5\1\14\1\5\1\0\2\5\1\0\56\5\1\15"+
    "\31\0\4\5\1\13\24\5\1\15\1\14\21\5\16\0"+
    "\1\12\5\0\1\12\1\0\1\13\2\0\30\5\12\0"+
    "\1\12\3\0\21\5\12\0\7\5\10\0\5\5\1\12"+
    "\5\0\1\14\5\0\1\5\2\0\2\5\1\0\5\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\u01a7\0\u01d6\0\57\0\u0205\0\u0234\0\u0263"+
    "\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db"+
    "\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553"+
    "\0\u0582\0\u05b1\0\u05e0\0\u05b1\0\57\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0178\0\57\0\u0758\0\u01d6"+
    "\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0"+
    "\0\u08ff\0\u092e\0\u0149\0\u095d\0\u0149\0\u098c\0\u09bb\0\u09ea"+
    "\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62"+
    "\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda"+
    "\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u0e52"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca"+
    "\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142"+
    "\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba"+
    "\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432"+
    "\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa"+
    "\0\u15d9\0\u1608\0\u1637\0\u06cb\0\u1666\0\u1695\0\u16c4\0\u16f3"+
    "\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b"+
    "\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3"+
    "\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b"+
    "\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3"+
    "\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b"+
    "\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3"+
    "\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c\0\u213b"+
    "\0\u216a\0\u2199\0\57\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284"+
    "\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc"+
    "\0\u242b\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574"+
    "\0\u25a3\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec"+
    "\0\57\0\u271b\0\u274a\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835"+
    "\0\u2864\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad"+
    "\0\u29dc\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98\0\u0149\0\u0149\0\u2ac7"+
    "\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f"+
    "\0\u2c6e\0\u2c9d\0\u2ccc\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u2db7"+
    "\0\u2de6\0\u2e15\0\u2e44\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00\0\u2f2f"+
    "\0\u2f5e\0\u2f8d\0\u2fbc\0\u2feb\0\u301a\0\u3049\0\57\0\u3078"+
    "\0\u30a7\0\u30d6\0\u3105\0\u3134\0\u3163\0\u3192\0\u2630\0\u31c1"+
    "\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac\0\u32db\0\u330a\0\u3339"+
    "\0\u3368\0\u3397\0\u33c6\0\u33f5\0\u3424\0\u3453\0\u3482\0\u34b1"+
    "\0\u34e0\0\u350f\0\u353e\0\u356d\0\u359c\0\u35cb\0\u35fa\0\u3629"+
    "\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714\0\u3743\0\u3772\0\u37a1"+
    "\0\u37d0\0\u37ff\0\u382e\0\u385d\0\u388c\0\u38bb\0\u38ea\0\u3919"+
    "\0\u3948\0\u3977\0\u39a6\0\u39d5\0\u3a04\0\u3a33\0\u3a62\0\u3a91"+
    "\0\u3ac0\0\u3aef\0\u3b1e\0\u3b4d\0\u3b7c\0\u3bab\0\u3bda\0\u3c09"+
    "\0\u3c38\0\u3c67\0\u3c96\0\u3cc5\0\u3cf4\0\u3d23\0\u3d52\0\u3d81"+
    "\0\u3db0\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c\0\u3e9b\0\u3eca\0\u3ef9"+
    "\0\u3f28\0\u3f57\0\u3f86\0\u3fb5\0\u3fe4\0\u4013\0\u4042\0\u4071"+
    "\0\u40a0\0\u40cf\0\u40fe\0\u412d\0\u415c\0\u418b\0\u41ba\0\u41e9"+
    "\0\u4218\0\u4247\0\u4276\0\u42a5\0\u42d4\0\u4303\0\u4332\0\u4361"+
    "\0\u4390\0\u3163\0\u43bf\0\u43ee\0\u441d\0\u444c\0\u447b\0\u44aa"+
    "\0\u44d9\0\u4508\0\u4537\0\u4566\0\u4595";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\6\1\20"+
    "\1\6\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\11\1\32\1\11\1\33\1\34\1\11"+
    "\1\35\1\36\1\37\1\11\1\40\1\41\1\11\1\15"+
    "\1\42\1\43\1\2\1\44\1\45\1\46\60\0\1\3"+
    "\60\0\1\5\53\0\1\47\1\0\2\47\2\6\4\47"+
    "\1\50\1\51\3\47\1\6\1\47\1\6\36\47\1\0"+
    "\2\47\2\52\4\47\1\50\1\51\3\47\1\52\1\47"+
    "\1\52\35\47\4\0\5\11\4\0\3\11\1\53\11\11"+
    "\1\54\13\11\1\0\1\11\13\0\5\11\4\0\31\11"+
    "\1\0\1\11\7\0\1\55\2\0\6\55\1\56\45\55"+
    "\4\0\1\6\5\0\1\57\1\60\3\0\1\6\1\0"+
    "\1\6\41\0\1\6\12\0\1\6\1\0\1\6\41\0"+
    "\5\11\4\0\5\11\1\61\6\11\1\62\5\11\1\63"+
    "\6\11\1\0\1\11\13\0\5\11\1\64\3\0\1\65"+
    "\2\11\1\66\10\11\1\67\1\70\1\11\1\71\11\11"+
    "\1\0\1\11\13\0\5\11\1\72\3\0\11\11\1\73"+
    "\1\74\1\75\3\11\1\76\2\11\1\73\2\11\1\77"+
    "\3\11\1\0\1\11\13\0\5\11\1\100\3\0\3\11"+
    "\1\101\16\11\1\102\6\11\1\0\1\11\13\0\5\11"+
    "\4\0\1\11\1\103\5\11\1\104\1\105\1\106\1\107"+
    "\1\110\1\111\5\11\1\112\6\11\1\0\1\11\13\0"+
    "\5\11\4\0\3\11\1\113\2\11\1\114\22\11\1\0"+
    "\1\11\13\0\5\11\4\0\1\115\11\11\1\116\2\117"+
    "\1\120\1\121\1\122\11\11\1\0\1\11\13\0\5\11"+
    "\4\0\3\11\1\123\2\11\1\124\6\11\1\125\1\11"+
    "\1\126\11\11\1\0\1\11\13\0\5\11\4\0\3\11"+
    "\1\73\7\11\1\127\2\11\1\77\1\11\1\130\10\11"+
    "\1\0\1\11\13\0\5\11\4\0\1\131\2\11\1\132"+
    "\2\11\1\133\6\11\1\134\13\11\1\0\1\11\13\0"+
    "\5\11\4\0\3\11\1\135\2\11\1\136\6\11\1\137"+
    "\13\11\1\0\1\11\13\0\5\11\4\0\10\11\2\73"+
    "\10\11\1\140\1\11\1\141\4\11\1\0\1\11\13\0"+
    "\5\11\4\0\10\11\1\142\11\11\1\143\6\11\1\0"+
    "\1\11\13\0\5\11\4\0\1\144\12\11\1\145\3\11"+
    "\1\146\11\11\1\0\1\11\13\0\5\11\4\0\1\147"+
    "\2\11\1\150\2\11\1\151\10\11\1\152\11\11\1\0"+
    "\1\11\13\0\5\11\4\0\3\11\1\112\2\11\1\153"+
    "\22\11\1\0\1\11\13\0\5\11\4\0\3\11\1\154"+
    "\2\11\1\155\4\11\1\156\3\11\1\157\11\11\1\0"+
    "\1\11\13\0\5\11\4\0\6\11\1\61\6\11\1\160"+
    "\1\161\12\11\1\0\1\11\13\0\5\11\4\0\6\11"+
    "\1\162\22\11\1\0\1\11\14\0\1\163\1\164\1\163"+
    "\2\0\1\163\2\0\1\165\1\166\1\163\2\0\1\163"+
    "\1\167\1\0\1\170\1\0\1\171\1\172\1\173\1\174"+
    "\1\175\1\163\5\0\1\176\1\163\1\0\1\177\1\0"+
    "\1\200\61\0\1\15\57\0\1\15\61\0\1\45\4\0"+
    "\2\201\4\0\1\202\1\203\3\0\1\201\1\0\1\201"+
    "\41\0\1\204\1\201\4\0\1\202\1\205\3\0\1\204"+
    "\1\0\1\204\41\0\1\204\1\201\4\0\1\202\1\203"+
    "\3\0\1\204\1\0\1\204\35\0\1\47\1\0\2\47"+
    "\2\204\4\47\1\50\1\51\3\47\1\204\1\47\1\204"+
    "\35\47\4\0\5\11\4\0\26\11\1\206\2\11\1\0"+
    "\1\11\13\0\5\11\4\0\10\11\1\207\20\11\1\0"+
    "\1\11\7\0\1\57\1\0\55\57\4\0\5\11\4\0"+
    "\15\11\1\76\13\11\1\0\1\11\13\0\5\11\4\0"+
    "\10\11\1\210\20\11\1\0\1\11\13\0\2\11\1\73"+
    "\2\11\4\0\12\11\1\211\16\11\1\0\1\11\14\0"+
    "\1\212\11\0\1\212\43\0\5\11\4\0\21\11\1\213"+
    "\7\11\1\0\1\11\13\0\2\11\1\214\2\11\4\0"+
    "\3\11\1\215\25\11\1\0\1\11\13\0\5\11\4\0"+
    "\3\11\1\216\25\11\1\0\1\11\13\0\5\11\4\0"+
    "\12\11\1\217\16\11\1\0\1\11\13\0\5\11\4\0"+
    "\10\11\1\73\1\220\17\11\1\0\1\11\14\0\1\221"+
    "\11\0\1\221\1\0\1\221\41\0\5\11\4\0\16\11"+
    "\1\222\12\11\1\0\1\11\13\0\5\11\4\0\12\11"+
    "\1\73\16\11\1\0\1\11\13\0\5\11\4\0\1\223"+
    "\30\11\1\0\1\11\13\0\3\224\6\0\3\224\1\0"+
    "\1\224\1\0\2\224\1\0\1\224\34\0\5\11\4\0"+
    "\13\11\1\75\15\11\1\0\1\11\13\0\5\11\4\0"+
    "\3\11\1\101\25\11\1\0\1\11\13\0\5\11\4\0"+
    "\10\11\1\75\20\11\1\0\1\11\13\0\5\11\4\0"+
    "\7\11\1\225\21\11\1\0\1\11\13\0\5\11\4\0"+
    "\10\11\1\226\20\11\1\0\1\11\13\0\5\11\4\0"+
    "\12\11\1\227\16\11\1\0\1\11\13\0\5\11\4\0"+
    "\12\11\1\230\16\11\1\0\1\11\13\0\5\11\4\0"+
    "\7\11\1\231\3\11\1\232\15\11\1\0\1\11\13\0"+
    "\5\11\4\0\14\11\1\73\1\233\13\11\1\0\1\11"+
    "\13\0\2\11\1\75\2\11\4\0\31\11\1\0\1\11"+
    "\13\0\5\11\4\0\22\11\1\234\1\11\1\235\4\11"+
    "\1\0\1\11\13\0\5\11\4\0\10\11\1\142\20\11"+
    "\1\0\1\11\13\0\5\11\4\0\14\11\1\236\13\11"+
    "\1\237\1\0\1\11\13\0\2\11\1\240\2\11\4\0"+
    "\31\11\1\0\1\11\13\0\5\11\4\0\6\11\1\75"+
    "\5\11\1\75\14\11\1\0\1\11\13\0\5\11\4\0"+
    "\21\11\1\241\7\11\1\0\1\11\13\0\5\11\4\0"+
    "\6\11\1\242\22\11\1\0\1\11\13\0\5\11\4\0"+
    "\1\11\1\243\27\11\1\0\1\11\13\0\5\11\4\0"+
    "\13\11\1\73\15\11\1\0\1\11\13\0\5\11\4\0"+
    "\14\11\1\244\14\11\1\0\1\11\13\0\5\11\4\0"+
    "\14\11\1\142\14\11\1\0\1\11\13\0\5\11\4\0"+
    "\22\11\1\245\6\11\1\0\1\11\13\0\5\11\4\0"+
    "\6\11\1\246\10\11\1\247\11\11\1\0\1\11\13\0"+
    "\5\11\4\0\25\11\1\142\3\11\1\0\1\11\13\0"+
    "\5\11\4\0\6\11\1\250\1\251\2\11\1\252\6\11"+
    "\1\253\2\11\1\75\1\254\1\11\1\236\1\11\1\0"+
    "\1\11\13\0\5\11\4\0\13\11\2\75\14\11\1\0"+
    "\1\11\13\0\5\11\4\0\22\11\1\255\6\11\1\0"+
    "\1\11\13\0\5\11\4\0\10\11\1\256\20\11\1\0"+
    "\1\11\13\0\5\11\4\0\3\11\1\153\25\11\1\0"+
    "\1\11\13\0\5\11\4\0\1\11\1\257\27\11\1\0"+
    "\1\11\13\0\5\11\4\0\1\11\1\260\10\11\1\261"+
    "\7\11\1\262\6\11\1\0\1\11\13\0\5\11\4\0"+
    "\1\263\2\11\1\264\6\11\1\265\16\11\1\0\1\11"+
    "\13\0\5\11\4\0\25\11\1\266\3\11\1\0\1\11"+
    "\13\0\5\11\4\0\1\73\30\11\1\0\1\11\13\0"+
    "\5\11\4\0\6\11\1\267\3\11\1\270\2\11\1\271"+
    "\13\11\1\0\1\11\13\0\5\11\4\0\22\11\1\272"+
    "\6\11\1\0\1\11\13\0\5\11\4\0\3\11\1\273"+
    "\25\11\1\0\1\11\13\0\5\11\4\0\6\11\1\274"+
    "\22\11\1\0\1\11\13\0\5\11\4\0\5\11\1\76"+
    "\20\11\1\73\2\11\1\0\1\11\13\0\5\11\4\0"+
    "\12\11\2\75\15\11\1\0\1\11\13\0\5\11\4\0"+
    "\12\11\1\275\7\11\1\112\6\11\1\0\1\11\13\0"+
    "\5\11\4\0\14\11\1\276\14\11\1\0\1\11\13\0"+
    "\5\11\4\0\25\11\1\73\3\11\1\0\1\11\13\0"+
    "\5\11\4\0\10\11\1\277\2\11\1\76\15\11\1\0"+
    "\1\11\13\0\5\11\4\0\7\11\1\262\21\11\1\0"+
    "\1\11\13\0\5\11\4\0\3\11\1\300\25\11\1\0"+
    "\1\11\13\0\5\11\4\0\13\11\1\142\15\11\1\0"+
    "\1\11\13\0\5\11\4\0\12\11\1\301\16\11\1\0"+
    "\1\11\13\0\5\11\4\0\1\223\14\11\1\125\13\11"+
    "\1\0\1\11\13\0\5\11\4\0\13\11\1\302\15\11"+
    "\1\0\1\11\55\0\1\303\25\0\1\304\12\0\1\305"+
    "\73\0\1\306\34\0\1\307\57\0\1\310\1\311\60\0"+
    "\1\312\2\0\1\313\1\0\1\314\52\0\1\315\43\0"+
    "\1\316\5\0\1\317\6\0\1\320\41\0\1\321\2\0"+
    "\1\322\2\0\1\323\22\0\1\303\47\0\1\324\1\0"+
    "\1\325\47\0\1\326\13\0\1\303\30\0\1\327\2\0"+
    "\1\330\4\0\1\331\51\0\1\332\67\0\1\333\26\0"+
    "\2\201\4\0\1\202\1\203\2\334\1\0\1\201\1\0"+
    "\1\201\41\0\1\201\6\0\1\203\3\0\1\201\1\0"+
    "\1\201\41\0\1\201\12\0\1\201\1\0\1\201\41\0"+
    "\1\204\12\0\1\204\1\0\1\204\41\0\5\11\4\0"+
    "\22\11\1\335\6\11\1\0\1\11\13\0\5\11\4\0"+
    "\7\11\1\336\21\11\1\0\1\11\13\0\5\11\4\0"+
    "\1\73\14\11\1\337\13\11\1\0\1\11\13\0\5\11"+
    "\4\0\15\11\1\340\13\11\1\0\1\11\14\0\1\212"+
    "\2\0\1\64\1\341\5\0\1\212\43\0\5\11\4\0"+
    "\15\11\1\223\13\11\1\0\1\11\13\0\5\11\4\0"+
    "\20\11\1\73\10\11\1\0\1\11\13\0\5\11\4\0"+
    "\14\11\1\342\14\11\1\0\1\11\13\0\5\11\4\0"+
    "\7\11\1\343\21\11\1\0\1\11\13\0\4\11\1\344"+
    "\4\0\31\11\1\0\1\11\13\0\5\11\4\0\11\11"+
    "\1\227\17\11\1\0\1\11\14\0\1\221\2\0\1\72"+
    "\1\341\5\0\1\221\1\0\1\221\41\0\5\11\4\0"+
    "\1\345\30\11\1\0\1\11\13\0\5\11\4\0\22\11"+
    "\1\73\6\11\1\0\1\11\13\0\3\224\1\0\1\100"+
    "\1\341\3\0\3\224\1\0\1\224\1\0\2\224\1\0"+
    "\1\224\34\0\5\11\4\0\1\346\30\11\1\0\1\11"+
    "\13\0\5\11\4\0\1\347\30\11\1\0\1\11\13\0"+
    "\5\11\4\0\1\123\30\11\1\0\1\11\13\0\5\11"+
    "\4\0\13\11\1\350\15\11\1\0\1\11\13\0\5\11"+
    "\4\0\16\11\1\351\12\11\1\0\1\11\13\0\5\11"+
    "\4\0\6\11\1\214\22\11\1\0\1\11\13\0\5\11"+
    "\4\0\6\11\1\352\22\11\1\0\1\11\13\0\5\11"+
    "\4\0\10\11\1\353\1\354\17\11\1\0\1\11\13\0"+
    "\5\11\4\0\25\11\1\355\3\11\1\0\1\11\13\0"+
    "\5\11\4\0\1\356\30\11\1\0\1\11\13\0\5\11"+
    "\4\0\1\357\30\11\1\0\1\11\13\0\4\11\1\360"+
    "\4\0\31\11\1\0\1\11\13\0\5\11\4\0\22\11"+
    "\1\361\6\11\1\0\1\11\13\0\5\11\4\0\13\11"+
    "\1\362\15\11\1\0\1\11\13\0\5\11\4\0\12\11"+
    "\1\363\16\11\1\0\1\11\13\0\5\11\4\0\10\11"+
    "\1\247\20\11\1\0\1\11\13\0\5\11\4\0\7\11"+
    "\1\364\21\11\1\0\1\11\13\0\5\11\4\0\22\11"+
    "\1\365\6\11\1\0\1\11\13\0\5\11\4\0\1\366"+
    "\30\11\1\0\1\11\13\0\5\11\4\0\14\11\1\367"+
    "\14\11\1\0\1\11\13\0\5\11\4\0\3\11\1\370"+
    "\25\11\1\0\1\11\13\0\5\11\4\0\17\11\1\371"+
    "\11\11\1\0\1\11\13\0\5\11\4\0\15\11\1\372"+
    "\13\11\1\0\1\11\13\0\5\11\4\0\3\11\1\347"+
    "\25\11\1\0\1\11\13\0\5\11\4\0\21\11\1\142"+
    "\7\11\1\0\1\11\13\0\5\11\4\0\15\11\1\373"+
    "\13\11\1\0\1\11\13\0\5\11\4\0\1\276\30\11"+
    "\1\0\1\11\13\0\5\11\4\0\13\11\1\374\15\11"+
    "\1\0\1\11\13\0\5\11\4\0\1\375\30\11\1\0"+
    "\1\11\13\0\5\11\4\0\23\11\1\376\5\11\1\0"+
    "\1\11\13\0\5\11\4\0\13\11\1\377\15\11\1\0"+
    "\1\11\13\0\5\11\4\0\17\11\1\76\11\11\1\0"+
    "\1\11\13\0\5\11\4\0\1\u0100\30\11\1\0\1\11"+
    "\13\0\5\11\4\0\17\11\1\157\11\11\1\0\1\11"+
    "\13\0\5\11\4\0\11\11\1\u0101\17\11\1\0\1\11"+
    "\13\0\5\11\4\0\15\11\1\276\13\11\1\0\1\11"+
    "\13\0\5\11\4\0\12\11\1\352\16\11\1\0\1\11"+
    "\13\0\5\11\4\0\1\u0102\30\11\1\0\1\11\13\0"+
    "\5\11\4\0\17\11\1\153\11\11\1\0\1\11\13\0"+
    "\5\11\4\0\13\11\1\u0103\15\11\1\0\1\11\13\0"+
    "\5\11\4\0\17\11\1\u0104\11\11\1\0\1\11\13\0"+
    "\5\11\4\0\14\11\1\73\14\11\1\0\1\11\13\0"+
    "\5\11\4\0\12\11\1\u0105\2\11\1\u0106\13\11\1\0"+
    "\1\11\13\0\5\11\4\0\7\11\1\u0107\21\11\1\0"+
    "\1\11\13\0\5\11\4\0\16\11\1\73\12\11\1\0"+
    "\1\11\13\0\5\11\4\0\15\11\1\u0108\13\11\1\0"+
    "\1\11\40\0\1\u0109\57\0\1\u010a\41\0\1\u010b\66\0"+
    "\1\u010c\60\0\1\u010d\53\0\1\u010e\55\0\1\u010f\74\0"+
    "\1\u0110\41\0\1\u0111\55\0\1\u0112\100\0\1\u0113\50\0"+
    "\1\u0114\55\0\1\u0115\46\0\1\u0116\73\0\1\u0117\40\0"+
    "\1\u0118\56\0\1\u0119\54\0\1\u0114\71\0\1\u011a\45\0"+
    "\1\u0117\60\0\1\u011b\44\0\1\u011c\72\0\1\u011d\57\0"+
    "\1\u011e\30\0\2\u011f\4\0\1\u0120\1\u0121\3\0\1\u011f"+
    "\1\0\1\u011f\41\0\5\11\4\0\12\11\1\u0122\16\11"+
    "\1\0\1\11\13\0\5\11\4\0\3\11\1\u0123\25\11"+
    "\1\0\1\11\13\0\5\11\4\0\11\11\1\73\17\11"+
    "\1\0\1\11\13\0\5\11\4\0\12\11\1\214\16\11"+
    "\1\0\1\11\13\0\5\11\4\0\1\u0124\30\11\1\0"+
    "\1\11\13\0\5\11\4\0\23\11\1\73\5\11\1\0"+
    "\1\11\13\0\5\11\4\0\30\11\1\u0125\1\0\1\11"+
    "\13\0\5\11\4\0\13\11\1\352\15\11\1\0\1\11"+
    "\13\0\5\11\4\0\10\11\1\352\20\11\1\0\1\11"+
    "\13\0\5\11\4\0\13\11\1\76\15\11\1\0\1\11"+
    "\13\0\5\11\4\0\15\11\1\u0126\13\11\1\0\1\11"+
    "\13\0\5\11\4\0\15\11\1\u0127\13\11\1\0\1\11"+
    "\13\0\5\11\4\0\10\11\1\73\20\11\1\0\1\11"+
    "\13\0\5\11\4\0\12\11\1\u0128\16\11\1\0\1\11"+
    "\13\0\5\11\4\0\15\11\1\u0129\13\11\1\0\1\11"+
    "\13\0\5\11\4\0\3\11\1\u012a\25\11\1\0\1\11"+
    "\13\0\5\11\4\0\7\11\1\76\21\11\1\0\1\11"+
    "\13\0\5\11\4\0\13\11\1\211\15\11\1\0\1\11"+
    "\13\0\5\11\4\0\14\11\1\u012b\14\11\1\0\1\11"+
    "\13\0\5\11\4\0\6\11\1\276\22\11\1\0\1\11"+
    "\13\0\5\11\4\0\1\u012c\30\11\1\0\1\11\13\0"+
    "\5\11\4\0\20\11\1\130\10\11\1\0\1\11\13\0"+
    "\5\11\4\0\12\11\1\u012d\16\11\1\0\1\11\13\0"+
    "\5\11\4\0\10\11\1\u012e\20\11\1\0\1\11\13\0"+
    "\5\11\4\0\13\11\1\u012c\15\11\1\0\1\11\13\0"+
    "\5\11\4\0\13\11\1\223\15\11\1\0\1\11\13\0"+
    "\5\11\4\0\10\11\1\106\20\11\1\0\1\11\13\0"+
    "\5\11\4\0\22\11\1\u012f\6\11\1\0\1\11\13\0"+
    "\5\11\4\0\6\11\1\u0130\22\11\1\0\1\11\13\0"+
    "\5\11\4\0\13\11\1\361\15\11\1\0\1\11\13\0"+
    "\5\11\4\0\6\11\1\255\22\11\1\0\1\11\13\0"+
    "\5\11\4\0\12\11\1\u0131\16\11\1\0\1\11\13\0"+
    "\5\11\4\0\21\11\1\u0132\7\11\1\0\1\11\13\0"+
    "\5\11\4\0\11\11\1\u0133\17\11\1\0\1\11\13\0"+
    "\5\11\4\0\13\11\1\u0134\15\11\1\0\1\11\13\0"+
    "\2\11\1\362\2\11\4\0\31\11\1\0\1\11\13\0"+
    "\5\11\4\0\13\11\1\u0135\15\11\1\0\1\11\13\0"+
    "\5\11\4\0\25\11\1\u0136\3\11\1\0\1\11\13\0"+
    "\5\11\4\0\12\11\1\u0137\16\11\1\0\1\11\13\0"+
    "\5\11\4\0\1\u0138\30\11\1\0\1\11\13\0\5\11"+
    "\4\0\6\11\1\u0139\22\11\1\0\1\11\32\0\1\u013a"+
    "\100\0\1\u013b\50\0\1\u013c\34\0\1\u0117\73\0\1\u013d"+
    "\41\0\1\u013e\57\0\1\u013f\102\0\1\u0140\40\0\1\u0141"+
    "\71\0\1\u0142\34\0\1\u0143\77\0\1\u010c\53\0\1\u0116"+
    "\52\0\1\u0144\56\0\1\u0145\56\0\1\u0146\62\0\1\u0117"+
    "\56\0\1\u0147\31\0\1\u0117\104\0\1\u010c\37\0\1\u013c"+
    "\45\0\1\u011f\6\0\1\u0121\3\0\1\u011f\1\0\1\u011f"+
    "\41\0\1\u011f\12\0\1\u011f\1\0\1\u011f\41\0\5\11"+
    "\4\0\3\11\1\73\25\11\1\0\1\11\13\0\5\11"+
    "\4\0\22\11\1\u0148\6\11\1\0\1\11\13\0\5\11"+
    "\4\0\6\11\1\u0149\22\11\1\0\1\11\13\0\5\11"+
    "\4\0\1\u014a\30\11\1\0\1\11\13\0\5\11\4\0"+
    "\1\11\1\u014b\27\11\1\0\1\11\13\0\5\11\4\0"+
    "\12\11\1\u014c\16\11\1\0\1\11\13\0\5\11\4\0"+
    "\6\11\1\u014d\22\11\1\0\1\11\13\0\5\11\4\0"+
    "\21\11\1\u014e\7\11\1\0\1\11\13\0\5\11\4\0"+
    "\22\11\1\u014f\6\11\1\0\1\11\13\0\5\11\4\0"+
    "\3\11\1\u0150\25\11\1\0\1\11\13\0\2\11\1\73"+
    "\2\11\4\0\31\11\1\0\1\11\13\0\5\11\4\0"+
    "\15\11\1\u0151\13\11\1\0\1\11\13\0\5\11\4\0"+
    "\25\11\1\254\3\11\1\0\1\11\13\0\5\11\4\0"+
    "\21\11\1\u0152\7\11\1\0\1\11\13\0\5\11\4\0"+
    "\13\11\1\214\15\11\1\0\1\11\13\0\5\11\4\0"+
    "\15\11\1\361\13\11\1\0\1\11\13\0\5\11\4\0"+
    "\1\u0153\30\11\1\0\1\11\13\0\5\11\4\0\1\u0154"+
    "\30\11\1\0\1\11\13\0\5\11\4\0\6\11\1\u0155"+
    "\6\11\1\u0156\13\11\1\0\1\11\13\0\5\11\4\0"+
    "\6\11\1\250\22\11\1\0\1\11\13\0\5\11\4\0"+
    "\3\11\1\u0157\25\11\1\0\1\11\13\0\5\11\4\0"+
    "\15\11\1\u0158\13\11\1\0\1\11\13\0\2\11\1\266"+
    "\2\11\4\0\10\11\1\352\20\11\1\0\1\11\13\0"+
    "\5\11\4\0\1\11\1\125\27\11\1\0\1\11\44\0"+
    "\1\331\53\0\1\u0159\53\0\1\u0117\74\0\1\u010c\50\0"+
    "\1\u015a\50\0\1\u010c\56\0\1\u015b\42\0\1\u015c\66\0"+
    "\1\u015d\61\0\1\u015e\46\0\1\u015f\46\0\1\u0160\71\0"+
    "\1\u0161\43\0\1\u0162\52\0\5\11\4\0\22\11\1\236"+
    "\6\11\1\0\1\11\13\0\5\11\4\0\22\11\1\367"+
    "\6\11\1\0\1\11\13\0\5\11\4\0\7\11\1\u0163"+
    "\21\11\1\0\1\11\13\0\5\11\4\0\17\11\1\u0155"+
    "\11\11\1\0\1\11\13\0\5\11\4\0\1\u0164\30\11"+
    "\1\0\1\11\13\0\5\11\4\0\22\11\1\76\6\11"+
    "\1\0\1\11\13\0\5\11\4\0\17\11\1\u0165\11\11"+
    "\1\0\1\11\13\0\5\11\4\0\1\u014d\30\11\1\0"+
    "\1\11\13\0\5\11\4\0\21\11\1\u0166\7\11\1\0"+
    "\1\11\13\0\5\11\4\0\3\11\1\223\25\11\1\0"+
    "\1\11\13\0\4\11\1\u0167\4\0\31\11\1\0\1\11"+
    "\13\0\5\11\4\0\13\11\1\367\15\11\1\0\1\11"+
    "\13\0\5\11\4\0\7\11\1\u0168\21\11\1\0\1\11"+
    "\13\0\5\11\4\0\12\11\1\142\16\11\1\0\1\11"+
    "\13\0\5\11\4\0\7\11\1\73\21\11\1\0\1\11"+
    "\13\0\5\11\4\0\22\11\1\362\6\11\1\0\1\11"+
    "\13\0\5\11\4\0\30\11\1\u0169\1\0\1\11\46\0"+
    "\1\u016a\25\0\1\u016b\65\0\1\u0147\66\0\1\327\54\0"+
    "\1\u016c\60\0\1\u016d\57\0\1\u0117\45\0\1\165\5\0"+
    "\1\u016e\21\0\1\u016f\50\0\1\u0170\56\0\1\u0171\23\0"+
    "\5\11\4\0\12\11\1\u0172\16\11\1\0\1\11\13\0"+
    "\5\11\4\0\7\11\1\u0173\21\11\1\0\1\11\13\0"+
    "\5\11\4\0\13\11\1\u0174\15\11\1\0\1\11\13\0"+
    "\5\11\4\0\15\11\1\u0175\13\11\1\0\1\11\13\0"+
    "\5\11\4\0\1\u0176\30\11\1\0\1\11\13\0\5\11"+
    "\4\0\12\11\1\362\16\11\1\0\1\11\13\0\5\11"+
    "\4\0\1\367\30\11\1\0\1\11\45\0\1\u0177\52\0"+
    "\1\u0178\50\0\1\u0179\47\0\1\u017a\65\0\1\310\55\0"+
    "\1\u017b\57\0\1\u015b\55\0\1\u017c\37\0\5\11\4\0"+
    "\3\11\1\u0153\25\11\1\0\1\11\13\0\5\11\4\0"+
    "\12\11\1\266\16\11\1\0\1\11\13\0\5\11\4\0"+
    "\6\11\1\364\22\11\1\0\1\11\13\0\5\11\4\0"+
    "\7\11\1\u017d\21\11\1\0\1\11\13\0\2\11\1\255"+
    "\2\11\4\0\31\11\1\0\1\11\17\0\1\u017e\105\0"+
    "\1\u017f\46\0\1\u0180\37\0\1\u0181\77\0\1\u0182\66\0"+
    "\1\u010c\21\0\4\11\1\u0183\4\0\31\11\1\0\1\11"+
    "\54\0\1\u016f\47\0\1\u0117\52\0\1\u0184\54\0\1\u0185"+
    "\32\0\5\11\4\0\10\11\1\u0186\6\11\1\u0187\10\11"+
    "\1\u0125\1\0\1\11\27\0\1\u0188\61\0\1\317\37\0"+
    "\5\11\4\0\15\11\1\u0189\13\11\1\0\1\11\13\0"+
    "\5\11\4\0\22\11\1\u018a\6\11\1\0\1\11\46\0"+
    "\1\u0117\23\0\5\11\4\0\21\11\1\u018b\7\11\1\0"+
    "\1\11\13\0\5\11\4\0\10\11\1\u0186\20\11\1\0"+
    "\1\11\13\0\5\11\4\0\22\11\1\u018c\6\11\1\0"+
    "\1\11\13\0\5\11\4\0\1\u018d\30\11\1\0\1\11"+
    "\13\0\2\11\1\367\2\11\4\0\31\11\1\0\1\11"+
    "\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17860];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\11\1\1\11\27\1\1\11\1\1\4\0"+
    "\2\1\1\0\1\11\1\1\1\0\3\1\1\0\5\1"+
    "\1\0\5\1\1\0\62\1\16\0\1\1\2\0\1\1"+
    "\1\0\4\1\1\0\6\1\1\0\2\1\1\0\56\1"+
    "\1\11\31\0\4\1\1\11\47\1\16\0\1\11\5\0"+
    "\1\1\1\0\1\1\2\0\30\1\12\0\1\1\3\0"+
    "\21\1\12\0\7\1\10\0\6\1\5\0\1\1\5\0"+
    "\1\1\2\0\2\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[397];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;


  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    /**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public VhdlTokenMaker() {
		super();
	}

    /**
	* Adds the token specified to the current linked list of tokens.
	*
	*@param tokenType The token's type.
	*/
    private void addToken(int tokenType){
          addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	 @Override
	 public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start, end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}

		@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "--", null };
	}

	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;
        // VHDL only needs the initial state
		s = text;
		try {
			yyreset(zzReader);
			yybegin(YYINITIAL);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}

	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos  = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}

	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VhdlTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public VhdlTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10:
          { addToken(Token.RESERVED_WORD);
          }
        case 14: break;
        case 5:
          { addToken(Token.IDENTIFIER);
          }
        case 15: break;
        case 13:
          { addToken(Token.FUNCTION);
          }
        case 16: break;
        case 8:
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 17: break;
        case 3:
          { addToken(Token.WHITESPACE);
          }
        case 18: break;
        case 4:
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT) ;
          }
        case 19: break;
        case 12:
          { addToken(Token.DATA_TYPE);
          }
        case 20: break;
        case 9:
          { addToken(Token.COMMENT_EOL);
          }
        case 21: break;
        case 1:
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 22: break;
        case 7:
          { addToken(Token.OPERATOR);
          }
        case 23: break;
        case 11:
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 24: break;
        case 2:
          { addNullToken(); return firstToken;
          }
        case 25: break;
        case 6:
          { addToken(Token.SEPARATOR);
          }
        case 26: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 398: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

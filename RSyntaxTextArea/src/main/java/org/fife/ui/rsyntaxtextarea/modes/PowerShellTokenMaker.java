/* The following code was generated by JFlex 1.4.1 on 3/2/25, 1:08â€¯AM */

/**
 * 27/02/2025
 * PowerShellTokenMaker.java - Scanner for the PowerShell scripting language.
 *
 * This library is distributed under a modified BSD license. See the included
 * LICENSE file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenTypes;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

/**
 * Scanner for the PowerShell scripting language.
 *
 * This implementation was created using
 * <a href="https://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>CTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 *
 * @author DOUDOU DIAWARA
 * @version 0.0
 */

public class PowerShellTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int BLOCK_COMMENT = 1;
  public static final int YYINITIAL = 0;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\3\1\1\1\0\1\3\1\2\22\0\1\3\1\54\1\23"+
    "\1\12\1\7\1\53\1\57\1\24\1\56\1\57\1\53\1\22\1\57"+
    "\1\17\1\20\1\53\1\11\11\5\1\55\1\57\1\13\1\52\1\14"+
    "\1\0\1\60\1\32\1\25\1\34\1\42\1\21\1\15\1\26\1\35"+
    "\1\27\1\50\1\33\1\36\1\44\1\30\1\40\1\45\1\4\1\31"+
    "\1\37\1\10\1\41\1\47\1\46\1\16\1\43\1\51\1\57\1\0"+
    "\1\57\1\0\1\6\1\0\1\32\1\25\1\34\1\42\1\21\1\15"+
    "\1\26\1\35\1\27\1\50\1\33\1\36\1\44\1\30\1\40\1\45"+
    "\1\4\1\31\1\37\1\10\1\41\1\47\1\46\1\16\1\43\1\51"+
    "\1\56\1\54\1\57\uff82\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\1\1\4"+
    "\1\5\1\6\1\1\1\4\1\7\1\4\1\7\2\1"+
    "\22\4\1\7\3\10\2\11\2\0\1\12\13\0\3\4"+
    "\1\0\1\13\5\4\1\7\4\4\1\0\1\14\1\0"+
    "\6\4\2\12\47\4\1\15\2\16\16\0\2\4\1\17"+
    "\4\4\1\12\104\4\15\0\7\4\1\12\4\4\1\12"+
    "\4\4\1\0\53\4\6\0\6\4\1\20\11\4\1\0"+
    "\1\4\1\0\1\4\1\0\5\4\1\21\5\0\13\4"+
    "\4\0\2\4\3\0\1\12\4\4\4\0\1\4\2\0"+
    "\2\4\4\0\1\4\2\0\2\4\4\0\1\4\13\0"+
    "\1\20\13\0\1\21\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\142\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\142\0\u06e4\0\142"+
    "\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\142\0\u080a\0\u083b"+
    "\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\142\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0310\0\142\0\u0341\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97"+
    "\0\u0dc8\0\365\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee"+
    "\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076"+
    "\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe"+
    "\0\u122f\0\u1260\0\u1291\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386"+
    "\0\u13b7\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e"+
    "\0\u153f\0\u1570\0\142\0\u15a1\0\u15d2\0\u15d2\0\u1603\0\u1634"+
    "\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc"+
    "\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u0ab8\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb"+
    "\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243"+
    "\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb"+
    "\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db"+
    "\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863"+
    "\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2a4d\0\u2a7e\0\u1bc1\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42"+
    "\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\u2cca"+
    "\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21\0\u2e52"+
    "\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47\0\u2f78\0\u2fa9\0\u2fda"+
    "\0\u300b\0\u303c\0\u306d\0\u309e\0\u30cf\0\u3100\0\u3131\0\u3162"+
    "\0\u3193\0\u31c4\0\u31f5\0\u3226\0\u3257\0\u3288\0\u32b9\0\u32ea"+
    "\0\u331b\0\u334c\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472"+
    "\0\u34a3\0\u34d4\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa"+
    "\0\u362b\0\u365c\0\u368d\0\u36be\0\u36ef\0\u2c68\0\u3720\0\u3751"+
    "\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846\0\u3877\0\u38a8\0\u38d9"+
    "\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61"+
    "\0\u3a92\0\u34d4\0\u3ac3\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8"+
    "\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40"+
    "\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8"+
    "\0\u3ef9\0\u3f2a\0\u3f5b\0\u3162\0\u3f8c\0\u3fbd\0\u3fee\0\u401f"+
    "\0\u4050\0\u4081\0\u40b2\0\u40e3\0\u4114\0\u4145\0\u4176\0\u41a7"+
    "\0\u41d8\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe\0\u432f"+
    "\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424\0\u4455\0\u4486\0\u44b7"+
    "\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e\0\u463f"+
    "\0\u4670\0\u46a1\0\142\0\u46d2\0\u4703\0\u4734\0\u4765\0\u4796"+
    "\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\3\1\16\1\7\1\17"+
    "\1\3\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\7\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\7\1\41\1\42\1\43\1\44"+
    "\1\45\1\7\1\46\1\21\1\46\1\47\2\50\1\51"+
    "\12\52\1\53\46\52\62\0\1\4\62\0\1\6\61\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\25\7\14\0\1\10\3\0\1\10\6\0\1\54\1\55"+
    "\45\0\1\56\1\0\1\57\4\0\1\60\3\0\1\61"+
    "\4\0\1\62\1\63\1\64\1\0\1\65\2\0\1\66"+
    "\1\67\1\70\5\0\1\71\17\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\72\3\0\4\7\1\73\3\7"+
    "\1\74\14\7\14\0\1\10\3\0\1\10\4\0\1\75"+
    "\1\0\1\54\1\55\37\0\1\14\1\0\57\14\12\0"+
    "\1\76\52\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\2\7\1\77\1\7\1\100\4\7\1\101"+
    "\1\7\1\102\1\103\10\7\13\0\1\104\1\10\2\0"+
    "\1\104\1\10\3\0\2\104\2\0\1\104\3\0\25\104"+
    "\1\46\12\0\3\7\1\0\2\7\3\0\1\7\1\105"+
    "\2\0\1\7\3\0\3\7\1\106\5\7\1\107\3\7"+
    "\1\110\7\7\61\0\1\46\6\0\1\111\2\0\20\111"+
    "\1\112\35\111\1\113\2\0\21\113\1\112\34\113\4\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\114\3\0"+
    "\4\7\1\115\1\116\3\7\1\117\13\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\120\3\0\4\7"+
    "\1\121\20\7\13\0\3\7\1\0\2\7\3\0\1\122"+
    "\1\7\2\0\1\7\3\0\3\7\1\123\13\7\1\124"+
    "\5\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\125\3\0\25\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\126\3\0\25\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\12\7\1\127"+
    "\2\7\1\130\7\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\5\7\1\131\2\7\1\132"+
    "\1\133\1\7\1\134\11\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\2\7\1\135\22\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\2\7\1\136\10\7\1\137\11\7\13\0\3\7"+
    "\1\0\1\140\1\7\3\0\2\7\2\0\1\141\3\0"+
    "\5\7\1\142\2\7\1\143\2\7\1\144\1\145\1\7"+
    "\1\146\1\7\1\147\1\150\3\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\14\7\1\120"+
    "\3\7\1\151\4\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\3\7\1\152\6\7\1\153"+
    "\5\7\1\154\4\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\155\3\0\2\7\1\156\2\7\1\157"+
    "\5\7\1\122\2\7\1\160\6\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\161\3\0\13\7\1\162"+
    "\11\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\4\7\1\163\1\164\5\7\1\165\1\166"+
    "\10\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\4\7\1\167\1\110\2\7\1\170\14\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\5\7\1\171\17\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\13\7\1\172\11\7"+
    "\64\0\1\46\61\0\1\50\2\0\12\52\1\0\46\52"+
    "\14\0\1\173\51\0\1\174\3\0\1\174\54\0\1\175"+
    "\3\0\1\175\5\0\1\176\2\0\1\176\67\0\1\177"+
    "\3\0\1\200\55\0\1\201\56\0\1\202\66\0\1\203"+
    "\52\0\1\204\71\0\1\205\50\0\1\206\67\0\1\207"+
    "\60\0\1\210\54\0\1\211\55\0\1\212\5\0\1\213"+
    "\25\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\12\7\1\120\12\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\5\7\1\214\10\7"+
    "\1\122\6\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\4\7\1\215\20\7\14\0\1\216"+
    "\3\0\1\216\3\0\1\216\3\0\1\216\3\0\1\216"+
    "\4\0\1\216\1\0\1\216\5\0\1\216\22\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\3\7"+
    "\1\217\5\7\1\220\13\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\13\7\1\221\11\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\14\7\1\222\10\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\4\7\1\223\20\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\3\7\1\224\21\7\13\0\1\104\3\0\1\104"+
    "\4\0\2\104\2\0\1\104\3\0\25\104\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\2\7"+
    "\1\225\15\7\1\226\4\7\13\0\3\7\1\0\1\227"+
    "\1\7\3\0\2\7\2\0\1\7\3\0\5\7\1\230"+
    "\6\7\1\221\1\122\7\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\12\7\1\231\12\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\2\7\1\120\22\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\1\7\1\232\23\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\233"+
    "\3\0\25\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\7\7\1\234\15\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\13\7"+
    "\1\235\11\7\13\0\3\7\1\0\1\236\1\7\3\0"+
    "\2\7\2\0\1\7\3\0\25\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\5\7\1\237"+
    "\17\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\2\7\1\240\7\7\1\241\7\7\1\242"+
    "\2\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\20\7\1\243\4\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\21\7\1\236"+
    "\3\7\13\0\3\7\1\0\1\244\1\7\3\0\2\7"+
    "\2\0\1\7\3\0\1\7\1\245\1\7\1\246\1\7"+
    "\1\130\1\7\1\247\2\7\1\250\4\7\1\251\1\252"+
    "\1\7\1\242\2\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\12\7\1\253\12\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\15\7\1\236\7\7\13\0\3\7\1\0\1\254\1\7"+
    "\3\0\2\7\2\0\1\7\3\0\25\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\255\3\0\25\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\256"+
    "\3\0\5\7\1\257\5\7\1\260\11\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\3\7"+
    "\1\261\13\7\1\262\1\263\4\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\15\7\1\264"+
    "\7\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\17\7\1\265\5\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\7\7\1\266"+
    "\15\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\5\7\1\267\5\7\1\165\11\7\13\0"+
    "\3\7\1\0\1\236\1\7\3\0\2\7\2\0\1\7"+
    "\3\0\3\7\1\130\1\7\1\270\3\7\1\271\13\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\22\7\1\272\2\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\13\7\1\125\11\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\4\7\1\273\20\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\12\7\1\274\12\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\3\7\1\275\21\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\11\7\1\110\13\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\2\7\1\276\22\7\13\0\3\7\1\0\1\277"+
    "\1\7\3\0\2\7\2\0\1\300\3\0\25\7\13\0"+
    "\3\7\1\0\1\301\1\7\3\0\2\7\2\0\1\7"+
    "\3\0\1\302\1\7\1\303\1\7\1\304\10\7\1\305"+
    "\7\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\236\3\0\2\7\1\306\22\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\15\7\1\307"+
    "\7\7\13\0\3\7\1\0\2\7\3\0\1\310\1\7"+
    "\2\0\1\7\3\0\1\311\10\7\1\312\13\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\12\7\1\313\12\7\13\0\3\7\1\0\1\314\1\7"+
    "\3\0\2\7\2\0\1\7\3\0\25\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\3\7"+
    "\1\315\21\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\4\7\1\316\1\317\17\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\14\7\1\237\5\7\1\272\2\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\13\7\1\320"+
    "\11\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\4\7\1\321\7\7\1\322\10\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\20\7\1\236\4\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\1\323\11\7\1\324\12\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\2\7\1\325\22\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\326\3\0\2\7\1\327\22\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\4\7\1\122\20\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\2\7\1\300\22\7"+
    "\14\0\1\174\3\0\1\174\7\0\1\55\44\0\1\175"+
    "\3\0\1\175\110\0\1\330\46\0\1\331\67\0\1\332"+
    "\71\0\1\333\51\0\1\334\65\0\1\335\51\0\1\336"+
    "\50\0\1\331\71\0\1\337\55\0\1\340\55\0\1\341"+
    "\56\0\1\342\60\0\1\343\17\0\1\344\15\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\7\7"+
    "\1\345\10\7\1\122\4\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\13\7\1\346\11\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\5\7\1\347\7\7\1\236\7\7\13\0\3\7"+
    "\1\0\1\350\1\7\3\0\2\7\2\0\1\7\3\0"+
    "\25\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\17\7\1\122\5\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\12\7\1\324"+
    "\12\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\351\3\0\17\7\1\352\5\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\7\7\1\353"+
    "\15\7\13\0\3\7\1\0\1\354\1\7\3\0\2\7"+
    "\2\0\1\7\3\0\25\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\5\7\1\355\5\7"+
    "\1\356\11\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\357\3\0\25\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\1\360\24\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\361\3\0"+
    "\25\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\2\7\1\362\22\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\5\7\1\363"+
    "\17\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\6\7\1\364\16\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\7\7\1\365"+
    "\15\7\13\0\3\7\1\0\2\7\3\0\2\7\1\366"+
    "\1\0\1\7\3\0\25\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\3\7\1\120\21\7"+
    "\13\0\3\7\1\0\1\367\1\7\3\0\2\7\2\0"+
    "\1\7\3\0\25\7\13\0\3\7\1\0\1\370\1\7"+
    "\3\0\2\7\2\0\1\7\3\0\25\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\13\7"+
    "\1\371\11\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\13\7\1\356\11\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\14\7"+
    "\1\372\10\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\2\7\1\373\22\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\5\7"+
    "\1\374\17\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\375\3\0\25\7\13\0\3\7\1\0\1\376"+
    "\1\7\3\0\2\7\2\0\1\120\3\0\2\7\1\377"+
    "\10\7\1\u0100\1\374\10\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\13\7\1\142\11\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\5\7\1\u0101\17\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\356\3\0\25\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\7\7"+
    "\1\u0102\15\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\7\7\1\u0103\15\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\5\7"+
    "\1\357\17\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\12\7\1\u0104\12\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\12\7"+
    "\1\272\12\7\13\0\3\7\1\0\1\u0105\1\7\3\0"+
    "\1\u0106\1\7\2\0\1\7\3\0\3\7\1\271\16\7"+
    "\1\u0107\2\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\20\7\1\u0108\4\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\16\7"+
    "\1\236\6\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\u0109\3\0\15\7\1\u010a\7\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\2\7"+
    "\1\u010b\22\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\6\7\1\u010c\16\7\13\0\3\7"+
    "\1\0\1\u010d\1\7\3\0\2\7\2\0\1\7\3\0"+
    "\4\7\1\120\20\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\4\7\1\u010e\20\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\u010f\3\0"+
    "\25\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\236\3\0\25\7\13\0\3\7\1\0\1\u0110\1\7"+
    "\3\0\2\7\2\0\1\7\3\0\25\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\20\7"+
    "\1\u0111\4\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\7\7\1\236\15\7\13\0\3\7"+
    "\1\0\1\u0112\1\7\3\0\2\7\2\0\1\7\3\0"+
    "\25\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\2\7\1\u0113\22\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\3\7\1\236"+
    "\21\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\2\7\1\u0114\22\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\11\7\1\117"+
    "\13\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\3\7\1\u0115\21\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\u0116\3\0\25\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\13\7\1\236\11\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\3\7\1\u0117\21\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\5\7\1\325\17\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\2\7\1\u0118\22\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\14\7\1\u0119\10\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\325\3\0\25\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\5\7\1\230"+
    "\1\7\1\u011a\7\7\1\u011b\5\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\5\7\1\122"+
    "\17\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\5\7\1\u011c\17\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\1\7\1\272"+
    "\23\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\12\7\1\u011d\12\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\7\7\1\u011e"+
    "\15\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\5\7\1\221\17\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\12\7\1\u011f"+
    "\12\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\11\7\1\u0120\13\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\10\7\1\236"+
    "\14\7\13\0\3\7\1\0\1\272\1\7\3\0\2\7"+
    "\2\0\1\7\3\0\25\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\4\7\1\u0121\20\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\11\7\1\u011f\13\7\30\0\1\56\76\0\1\56"+
    "\60\0\1\330\76\0\1\u0122\30\0\1\340\74\0\1\337"+
    "\55\0\1\56\32\0\1\56\102\0\1\u0123\55\0\1\u0124"+
    "\100\0\1\u0125\21\0\1\u0126\71\0\1\u0127\43\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\u0128\3\0\25\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\21\7\1\122\3\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\11\7\1\u0129\13\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\171"+
    "\3\0\25\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\5\7\1\u012a\17\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\5\7"+
    "\1\120\17\7\13\0\3\7\1\0\1\u012b\1\7\3\0"+
    "\2\7\2\0\1\7\3\0\25\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\3\7\1\130"+
    "\21\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\4\7\1\120\20\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\4\7\1\236"+
    "\20\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\11\7\1\272\13\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\2\7\1\u012c"+
    "\22\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\3\7\1\122\21\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\6\7\1\122"+
    "\16\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\14\7\1\u012d\10\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\6\7\1\236"+
    "\16\7\13\0\1\u012e\3\0\1\u012e\4\0\2\u012e\2\0"+
    "\1\u012e\3\0\25\u012e\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\2\7\1\u012f\22\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\5\7\1\u0130\17\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\6\7\1\272\16\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\4\7\1\362\20\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\12\7\1\u0131\12\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\17\7\1\272\5\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\2\7\1\142\22\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\5\7\1\356\5\7\1\u0132\11\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\24\7\1\272"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\11\7\1\142\13\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\2\7\1\357\22\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\10\7\1\122\14\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\6\7\1\u0133\16\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\12\7\1\122\12\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\2\7\1\u0134\22\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\2\7\1\u0135\22\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\u0136\3\0\25\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\4\7"+
    "\1\u0137\1\u0132\3\7\1\312\13\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\1\u0138\1\0\1\7\3\0\25\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\362"+
    "\3\0\25\7\13\0\3\7\1\0\1\u0139\1\7\3\0"+
    "\2\7\2\0\1\7\3\0\25\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\1\u013a\1\0\1\7\3\0\25\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\2\7\1\u013b\22\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\7\7\1\324\15\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\7\7\1\120\15\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\1\u013c\1\0\1\7\3\0\25\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\355\3\0"+
    "\25\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\7\7\1\u013d\15\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\17\7\1\u013e"+
    "\5\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\11\7\1\122\13\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\12\7\1\241"+
    "\12\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\1\7\1\245\23\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\1\7\1\122"+
    "\23\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\3\7\1\u011f\21\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\1\7\1\236"+
    "\23\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\13\7\1\u013f\11\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\13\7\1\u0140"+
    "\11\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\17\7\1\u0141\5\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\14\7\1\u0132"+
    "\10\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\257\3\0\25\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\122\3\0\25\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\2\7\1\222"+
    "\22\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\u0110\3\0\25\7\13\0\3\u0142\1\0\2\u0142\3\0"+
    "\2\u0142\2\0\1\u0142\3\0\25\u0142\45\0\1\333\67\0"+
    "\1\u0143\45\0\1\u0144\47\0\1\u0145\70\0\1\u0146\33\0"+
    "\3\7\1\0\2\7\3\0\2\7\1\u0147\1\0\1\7"+
    "\3\0\25\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\11\7\1\u0148\13\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\7\7"+
    "\1\u0149\15\7\13\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\2\7\1\u014a\22\7\13\0\3\7"+
    "\1\0\2\7\3\0\1\122\1\7\2\0\1\7\3\0"+
    "\25\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\20\7\1\u014b\4\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\5\7\1\u014c"+
    "\17\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\11\7\1\u014d\13\7\13\0\3\7\1\0"+
    "\1\227\1\7\3\0\2\7\2\0\1\7\3\0\25\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\4\7\1\272\20\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\20\7\1\u014e\4\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\3\7\1\u014f\21\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\4\7\1\u0150\20\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\4\7\1\u0151\20\7\13\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\u0152\3\0\25\7\56\0\1\u0153"+
    "\15\0\3\7\1\0\2\7\3\0\2\7\1\u0154\1\0"+
    "\1\7\3\0\25\7\34\0\1\u0155\37\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\7\7\1\122"+
    "\15\7\47\0\1\u0156\24\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\10\7\1\354\14\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\2\7\1\377\22\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\3\7\1\u0157\21\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\14\7\1\237\10\7\13\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\2\7\1\u0158\22\7\17\0"+
    "\1\333\60\0\1\u0159\114\0\1\56\53\0\1\u015a\55\0"+
    "\1\u015b\30\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\16\7\1\122\6\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\10\7\1\u015c"+
    "\14\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\13\7\1\362\11\7\13\0\3\7\1\0"+
    "\1\u015d\1\7\3\0\2\7\1\366\1\0\1\7\3\0"+
    "\25\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\11\7\1\u013e\13\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\11\7\1\236"+
    "\13\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\13\7\1\u015e\11\7\13\0\3\7\1\0"+
    "\2\7\3\0\2\7\2\0\1\7\3\0\14\7\1\u011f"+
    "\10\7\13\0\3\7\1\0\2\7\3\0\2\7\2\0"+
    "\1\7\3\0\17\7\1\236\5\7\13\0\3\7\1\0"+
    "\1\u015f\1\7\3\0\2\7\2\0\1\7\3\0\25\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\12\7\1\u0160\12\7\36\0\1\u0161\52\0\1\u0162"+
    "\66\0\1\u0163\56\0\1\u0164\37\0\3\7\1\0\2\7"+
    "\3\0\2\7\2\0\1\7\3\0\3\7\1\271\21\7"+
    "\13\0\3\7\1\0\2\7\3\0\2\7\2\0\1\7"+
    "\3\0\7\7\1\u0165\15\7\30\0\1\333\66\0\1\u0166"+
    "\71\0\1\u0167\24\0\3\7\1\0\2\7\3\0\2\7"+
    "\2\0\1\7\3\0\13\7\1\u0168\11\7\13\0\3\7"+
    "\1\0\2\7\3\0\2\7\2\0\1\7\3\0\2\7"+
    "\1\237\22\7\13\0\3\7\1\0\1\305\1\7\3\0"+
    "\1\u0169\1\7\1\366\1\0\1\7\3\0\25\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\12\7\1\236\12\7\40\0\1\u016a\76\0\1\u016b\21\0"+
    "\1\u016c\120\0\1\u016d\14\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\20\7\1\u016e\4\7\47\0"+
    "\1\u016f\64\0\1\u0170\20\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\5\7\1\u0171\17\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\4\7\1\u0172\20\7\17\0\1\u0173\71\0\1\u0174\75\0"+
    "\1\u0175\43\0\1\u0176\43\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\5\7\1\u0177\17\7\37\0"+
    "\1\u0178\74\0\1\u0179\20\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\5\7\1\130\17\7\13\0"+
    "\3\7\1\0\2\7\3\0\2\7\2\0\1\7\3\0"+
    "\13\7\1\u0150\11\7\50\0\1\u017a\47\0\1\u017b\70\0"+
    "\1\u017c\54\0\1\u017d\30\0\3\7\1\0\2\7\3\0"+
    "\2\7\2\0\1\7\3\0\4\7\1\321\20\7\17\0"+
    "\1\u017e\102\0\1\u017f\60\0\1\u0180\36\0\1\u0181\104\0"+
    "\1\u0182\34\0\1\u0183\102\0\1\u0184\56\0\1\u0185\66\0"+
    "\1\u0186\60\0\1\u0187\55\0\1\u0188\52\0\1\u0189\75\0"+
    "\1\u0183\60\0\1\u018a\56\0\1\u018b\41\0\1\u018c\75\0"+
    "\1\u018d\51\0\1\u018e\57\0\1\u0183\63\0\1\u0183\50\0"+
    "\1\u018f\76\0\1\u0190\21\0\1\u0142\1\0\57\u0142\33\0"+
    "\1\u0183\25\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18767];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\41\1\1\11\1\1\1\11\3\1\2\0"+
    "\1\11\13\0\3\1\1\0\1\11\12\1\1\0\1\11"+
    "\1\0\57\1\1\11\2\1\16\0\114\1\15\0\21\1"+
    "\1\0\53\1\6\0\20\1\1\0\1\1\1\0\1\1"+
    "\1\0\6\1\5\0\13\1\4\0\2\1\3\0\5\1"+
    "\4\0\1\1\2\0\2\1\4\0\1\1\2\0\2\1"+
    "\4\0\1\1\13\0\1\11\13\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[400];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
    /**
     * Constructor. This must be here because JFlex does not generate a
     * no-parameter constructor.
     */
    public PowerShellTokenMaker() {
        super();
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType) {
        addToken(zzStartRead, zzMarkedPos-1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType) {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array The character array.
     * @param start The starting offset in the array.
     * @param end The ending offset in the array.
     * @param tokenType The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex) {
        return new String[] { "#", null };
    }

    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset The offset into the document at which
     *        <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     *         the syntax highlighted text.
     */
    @Override
    public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = TokenTypes.NULL;
        switch (initialTokenType) {
            case TokenTypes.COMMENT_MULTILINE:
                state = BLOCK_COMMENT;
                break;
            default:
                state = YYINITIAL;
        }

        s = text;
        try {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        } catch (IOException ioe) {
            ioe.printStackTrace();
            return new TokenImpl();
        }
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>true</code> if EOF was reached, otherwise
     *              <code>false</code>.
     */
    private boolean zzRefill() {
        return zzCurrentPos>=s.offset+s.count;
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader   the new input stream
     */
    public final void yyreset(Reader reader) {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
         * We replaced the line below with the two below it because zzRefill
         * no longer "refills" the buffer (since the way we do it, it's always
         * "full" the first time through, since it points to the segment's
         * array).  So, we assign zzEndRead here.
         */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtEOF  = false;
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PowerShellTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PowerShellTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }

  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13:
          { yybegin(YYINITIAL); addToken(TokenTypes.COMMENT_MULTILINE);
          }
        case 18: break;
        case 14:
          { addToken(TokenTypes.LITERAL_NUMBER_FLOAT);
          }
        case 19: break;
        case 15:
          { addToken(TokenTypes.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 20: break;
        case 11:
          { yybegin(BLOCK_COMMENT); addToken(TokenTypes.COMMENT_MULTILINE);
          }
        case 21: break;
        case 12:
          { addToken(TokenTypes.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 22: break;
        case 5:
          { addToken(TokenTypes.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 23: break;
        case 16:
          { addToken(TokenTypes.FUNCTION);
          }
        case 24: break;
        case 9:
          { addToken(TokenTypes.COMMENT_MULTILINE);
          }
        case 25: break;
        case 6:
          { addToken(TokenTypes.COMMENT_EOL);
          }
        case 26: break;
        case 4:
          { addToken(TokenTypes.IDENTIFIER);
          }
        case 27: break;
        case 2:
          { addNullToken(); return firstToken;
          }
        case 28: break;
        case 17:
          { addToken(TokenTypes.RESERVED_WORD_2);
          }
        case 29: break;
        case 1:
          { addToken(TokenTypes.ERROR_IDENTIFIER);
          }
        case 30: break;
        case 3:
          { addToken(TokenTypes.WHITESPACE);
          }
        case 31: break;
        case 8:
          { addToken(TokenTypes.SEPARATOR);
          }
        case 32: break;
        case 7:
          { addToken(TokenTypes.OPERATOR);
          }
        case 33: break;
        case 10:
          { addToken(TokenTypes.RESERVED_WORD);
          }
        case 34: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                addNullToken(); return firstToken;
              }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

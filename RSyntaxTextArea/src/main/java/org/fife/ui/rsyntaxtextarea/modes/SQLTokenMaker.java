/* The following code was generated by JFlex 1.5.1 */

/*
 * 02/15/2005
 *
 * SQLTokenMaker.java - Scanner for SQL.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;
import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class generates tokens representing a text stream as SQL.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>SQLTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class SQLTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int CHAR = 4;
  public static final int MLC = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\1\1\21\1\21\1\21\22\0\1\4\1\0\1\60"+
    "\4\0\1\61\2\15\1\13\1\11\1\0\1\12\1\17\1\14\1\3"+
    "\1\53\1\53\1\3\1\50\3\3\1\51\1\3\1\16\1\0\1\10"+
    "\1\7\1\6\2\0\1\22\1\42\1\33\1\23\1\20\1\47\1\52"+
    "\1\44\1\37\1\54\1\56\1\24\1\40\1\27\1\35\1\45\1\57"+
    "\1\26\1\32\1\25\1\34\1\41\1\43\1\46\1\30\1\2\1\62"+
    "\1\0\1\63\1\0\1\5\1\0\1\22\1\42\1\33\1\23\1\20"+
    "\1\47\1\52\1\44\1\37\1\54\1\56\1\24\1\40\1\27\1\35"+
    "\1\45\1\57\1\26\1\32\1\25\1\34\1\41\1\43\1\46\1\30"+
    "\1\2\12\0\1\21\252\0\2\36\115\0\1\31\u1ea8\0\1\21\1\21"+
    "\u0100\0\1\55\uded5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\1\1\3\1\4\5\5\1\6"+
    "\1\1\1\7\32\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\13\1\16\1\17\1\13\1\20\1\13\1\0"+
    "\1\21\1\22\5\1\2\23\6\1\1\0\3\1\1\0"+
    "\6\1\1\0\3\1\1\0\4\1\10\0\15\1\1\0"+
    "\3\1\2\23\4\1\2\23\2\0\1\23\4\1\1\0"+
    "\3\1\1\23\1\1\1\0\1\1\1\0\7\1\1\0"+
    "\10\1\1\0\1\1\1\24\1\13\1\25\1\7\2\0"+
    "\2\1\1\0\3\1\1\26\1\1\1\0\3\1\1\0"+
    "\7\1\1\0\1\1\1\0\3\1\1\0\2\1\1\0"+
    "\1\1\11\0\17\1\1\0\1\1\2\0\6\1\1\0"+
    "\1\23\3\0\1\1\1\23\6\1\1\23\2\1\1\23"+
    "\1\0\1\23\1\1\1\0\4\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\6\1\1\0\1\1\1\0"+
    "\3\1\1\23\2\1\2\0\2\1\1\23\1\1\1\0"+
    "\3\1\1\26\2\23\1\1\1\0\1\1\10\0\10\1"+
    "\1\0\4\1\1\23\1\0\1\1\1\0\4\1\1\0"+
    "\1\1\3\0\11\1\2\0\4\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\3\1\2\0\3\1\1\0"+
    "\1\1\1\23\1\0\1\1\1\0\3\1\1\0\1\23"+
    "\3\0\1\1\1\23\4\1\1\0\3\1\1\23\4\1"+
    "\1\0\2\1\1\23\1\1\1\0\2\1\1\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\23\1\0\2\1\1\0"+
    "\1\1\2\0\2\1\3\0\2\1\1\0\2\1\4\0"+
    "\4\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\2\1\2\0"+
    "\2\1\1\0\2\1\2\0\5\1\2\23\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\2\23\2\0\2\1\2\0"+
    "\4\1\1\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\1\3\0\1\1\1\0\1\1\2\26\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[511];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\320\0\u0104\0\u0138"+
    "\0\u016c\0\u01a0\0\320\0\u01d4\0\u0208\0\u023c\0\320\0\u0270"+
    "\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410"+
    "\0\u0444\0\u0478\0\u04ac\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0"+
    "\0\u05e4\0\u0618\0\u064c\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u0750"+
    "\0\u0784\0\u07b8\0\u07ec\0\320\0\320\0\u0820\0\u0854\0\320"+
    "\0\u0888\0\u08bc\0\320\0\u08f0\0\u0924\0\320\0\u0958\0\u098c"+
    "\0\u09c0\0\320\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8"+
    "\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30\0\u0c64\0\u0c98"+
    "\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38"+
    "\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\u1074\0\u10a8\0\u10dc\0\u1110\0\u1144\0\u1178"+
    "\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u12e4\0\u1318"+
    "\0\u134c\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8"+
    "\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u0104\0\u15f0\0\u1624"+
    "\0\u1658\0\u168c\0\u16c0\0\320\0\u16f4\0\u1728\0\u175c\0\u1790"+
    "\0\u17c4\0\u17f8\0\u182c\0\u1860\0\u1894\0\u18c8\0\u18fc\0\u1930"+
    "\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0"+
    "\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c\0\u1c70"+
    "\0\u1ca4\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74\0\u1da8\0\320\0\320"+
    "\0\320\0\u1ddc\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0"+
    "\0\u1f14\0\u1f48\0\u0104\0\u1f7c\0\u0af8\0\u0b2c\0\u1fb0\0\u1fe4"+
    "\0\u2018\0\u204c\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184"+
    "\0\u21b8\0\u21ec\0\u2220\0\u2254\0\u2288\0\u22bc\0\u22f0\0\u2324"+
    "\0\u2358\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u279c\0\u27d0\0\u2804"+
    "\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970\0\u29a4"+
    "\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u2b10\0\u2b44"+
    "\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c\0\u2cb0\0\u2ce4"+
    "\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c\0\u2e50\0\u2e84"+
    "\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc\0\u2ff0\0\u3024"+
    "\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128\0\u315c\0\u3190\0\u31c4"+
    "\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8\0\u32fc\0\u3330\0\u3364"+
    "\0\u1930\0\u3398\0\u33cc\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0"+
    "\0\u3504\0\u3538\0\u356c\0\u35a0\0\u35d4\0\u3608\0\320\0\u363c"+
    "\0\u3670\0\u36a4\0\u36d8\0\u370c\0\u3740\0\u3774\0\u37a8\0\u37dc"+
    "\0\u3810\0\u3844\0\u3878\0\u38ac\0\u38e0\0\u3914\0\u3948\0\u397c"+
    "\0\u39b0\0\u39e4\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4\0\u3ae8\0\u3b1c"+
    "\0\u3b50\0\u3b84\0\u3bb8\0\u3bec\0\u3c20\0\u3c54\0\u3c88\0\u3cbc"+
    "\0\u3cf0\0\u3d24\0\u3d58\0\u3d8c\0\u3dc0\0\u3df4\0\u3e28\0\u3e5c"+
    "\0\u3e90\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60\0\u3f94\0\u3fc8\0\u3ffc"+
    "\0\u4030\0\u4064\0\u4098\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c"+
    "\0\u41d0\0\u4204\0\u4238\0\u426c\0\u42a0\0\u42d4\0\u4308\0\u433c"+
    "\0\u4370\0\u43a4\0\u43d8\0\u440c\0\u4440\0\u4474\0\u44a8\0\u44dc"+
    "\0\u4510\0\u4544\0\u1d0c\0\u4578\0\u45ac\0\u45e0\0\u4614\0\u4648"+
    "\0\u467c\0\u46b0\0\u16f4\0\u46e4\0\u4718\0\u474c\0\u4780\0\u0ea0"+
    "\0\u47b4\0\u47e8\0\u481c\0\u4850\0\u4884\0\u48b8\0\u48ec\0\u4920"+
    "\0\u1f14\0\u4954\0\u4988\0\u2e84\0\u49bc\0\u49f0\0\u4a24\0\u4a58"+
    "\0\u4308\0\u4a8c\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c\0\u4b90\0\u4bc4"+
    "\0\u4bf8\0\u4c2c\0\u4c60\0\u4c94\0\u4cc8\0\u4cfc\0\u4d30\0\u4d64"+
    "\0\u4d98\0\u4dcc\0\u4e00\0\u4e34\0\u4e68\0\u4e9c\0\u4ed0\0\u4f04"+
    "\0\u4f38\0\u4f6c\0\u4fa0\0\u4fd4\0\u5008\0\u503c\0\u5070\0\u50a4"+
    "\0\u50d8\0\u510c\0\u5140\0\u5174\0\u51a8\0\u51dc\0\u5210\0\u5244"+
    "\0\u5278\0\u52ac\0\u52e0\0\u5314\0\u5348\0\u537c\0\u53b0\0\u53e4"+
    "\0\u5418\0\u544c\0\u5480\0\u54b4\0\u54e8\0\u551c\0\u5550\0\u5584"+
    "\0\u55b8\0\u55ec\0\u5620\0\u5654\0\u5688\0\u56bc\0\u56f0\0\u5724"+
    "\0\u5758\0\u578c\0\u57c0\0\u57f4\0\u5828\0\u585c\0\u5890\0\u58c4"+
    "\0\u58f8\0\u592c\0\u5960\0\u5994\0\u59c8\0\u59fc\0\u5a30\0\u5a64"+
    "\0\u5a98\0\u5acc\0\u5b00\0\u5b34\0\u5b68\0\u5b9c\0\u5bd0\0\u5c04"+
    "\0\u5c38\0\u5c6c\0\u5ca0\0\u5cd4\0\u5d08\0\u5d3c\0\u5d70\0\u5da4"+
    "\0\u5dd8\0\u5e0c\0\u5e40\0\u5e74\0\u5ea8\0\u5edc\0\u5f10\0\u5f44"+
    "\0\u5f78\0\u5fac\0\u5fe0\0\u6014\0\u6048\0\u607c\0\u60b0\0\u60e4"+
    "\0\u6118\0\u614c\0\u6180\0\u61b4\0\u61e8\0\u621c\0\u6250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[511];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\5\1\12\1\13"+
    "\1\14\1\13\1\15\1\13\1\16\1\17\1\20\1\21"+
    "\1\22\1\0\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\7\1\47"+
    "\2\10\1\50\1\10\1\51\1\52\1\53\1\7\1\54"+
    "\1\55\1\56\1\5\1\57\1\60\56\57\1\61\3\57"+
    "\1\62\1\63\57\62\1\64\2\62\1\65\1\66\11\65"+
    "\1\67\50\65\66\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\7\0\1\10\13\0\1\21\1\70\27\0\2\10\1\0"+
    "\1\10\14\0\1\11\66\0\1\13\62\0\2\13\66\0"+
    "\1\71\64\0\1\72\52\0\1\7\15\0\1\7\1\0"+
    "\7\7\1\0\4\7\1\0\11\7\2\0\1\7\1\0"+
    "\1\7\1\0\2\7\7\0\1\21\14\0\1\70\27\0"+
    "\2\21\1\0\1\21\12\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\2\7\1\73\2\7\1\74\1\7\1\0"+
    "\4\7\1\0\7\7\1\75\6\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\1\7\1\74"+
    "\1\76\2\7\1\77\1\7\1\100\1\101\1\7\1\102"+
    "\1\7\1\0\2\7\1\103\13\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\104\1\0\1\105\3\7"+
    "\1\106\2\7\1\0\3\7\1\107\1\110\1\111\15\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\112"+
    "\1\0\7\7\1\0\3\7\1\113\1\114\1\115\15\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\116"+
    "\1\0\1\117\3\7\1\120\1\7\1\121\1\0\3\7"+
    "\1\122\1\123\1\124\4\7\1\125\10\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\126\1\0\7\7"+
    "\1\0\4\7\1\127\1\130\15\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\2\7\1\131\1\132\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\133\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\24\0\1\134\4\0"+
    "\1\135\2\0\1\136\3\0\1\137\1\140\2\141\1\142"+
    "\3\0\1\143\21\0\2\7\1\0\1\7\12\0\1\144"+
    "\1\0\3\7\1\145\2\7\1\146\1\0\2\7\1\147"+
    "\1\150\1\141\1\151\1\152\3\7\1\153\10\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\1\73\3\7\1\154\2\7\1\0\2\7\1\155\1\156"+
    "\1\0\5\7\1\157\10\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\5\7\1\160\1\7"+
    "\1\161\1\162\3\7\1\0\6\7\1\163\7\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\2\7\1\164\1\7\1\165\1\166\1\7\1\0\1\7"+
    "\1\167\1\170\1\7\1\0\4\7\1\171\1\7\1\172"+
    "\7\7\1\0\2\7\33\0\1\173\1\0\2\174\5\0"+
    "\1\175\11\0\1\176\13\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\5\7\1\177\1\7\1\174\1\166\3\7"+
    "\1\0\1\7\1\122\11\7\1\200\2\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\201\1\0\1\202"+
    "\6\7\1\0\3\7\1\203\1\204\1\205\15\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\1\206\6\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\207\1\0\6\7"+
    "\1\210\1\0\3\7\1\211\1\212\1\213\15\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\7\7\1\0\4\7\1\214\1\215\4\7\1\216\10\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\1\217\6\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\220\1\0"+
    "\1\221\3\7\1\222\2\7\1\0\3\7\1\223\1\224"+
    "\1\225\15\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\2\7\1\226\1\7\1\227\2\7"+
    "\1\0\3\7\1\230\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\231\1\0\4\7\1\232"+
    "\2\7\1\0\2\7\1\233\1\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\7\7\1\0\3\7\1\234\1\0\16\7\1\0\2\7"+
    "\24\0\1\235\45\0\2\7\1\0\1\7\12\0\1\236"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\4\0\63\56\1\237\1\57\1\0\56\57\1\0\3\57"+
    "\60\0\1\240\3\0\1\62\1\0\57\62\1\0\2\62"+
    "\61\0\1\240\2\0\1\65\1\0\11\65\1\0\50\65"+
    "\14\0\1\241\52\0\1\242\5\0\2\243\35\0\2\242"+
    "\1\0\1\242\10\0\1\71\1\0\17\71\1\0\42\71"+
    "\2\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\244\1\245\3\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\1\7\1\166"+
    "\5\7\1\0\4\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\3\7\1\246"+
    "\3\7\1\0\4\7\1\247\1\250\15\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
    "\1\166\1\251\3\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\1\7\1\166\4\7\1\166\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\37\0\1\174\32\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\1\7\1\166\2\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\3\7\1\252\3\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\1\166\6\7\1\0\4\7\1\0"+
    "\13\7\1\253\2\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\2\7\1\254\4\7\1\255"+
    "\1\256\3\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\3\7\1\257\3\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\3\7"+
    "\1\122\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\2\7\1\260"+
    "\1\7\1\0\16\7\1\0\2\7\35\0\2\261\33\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\261"+
    "\1\262\3\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\2\7\1\263\5\7\1\132\5\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
    "\1\264\1\7\1\0\4\7\1\0\4\7\1\265\6\7"+
    "\1\266\2\7\1\0\2\7\61\0\2\244\7\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\16\7\1\244\1\245\1\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\7\7\1\132\6\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\3\7\1\267\12\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\1\270\6\7\1\0\4\7"+
    "\1\271\1\272\15\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\6\7\1\245\7\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\6\7\1\166\7\7\1\0\2\7\44\0\1\273\25\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\0\1\7\1\274\14\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\205\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\1\275\6\7\1\0\4\7"+
    "\1\0\10\7\1\276\5\7\1\0\2\7\56\0\1\277"+
    "\13\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\0\4\7\1\0\13\7\1\300\2\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
    "\1\275\4\7\1\0\4\7\1\0\1\7\1\301\14\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\3\7\1\166\3\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\302\1\303\3\7\1\0\16\7\1\0"+
    "\2\7\30\0\1\304\1\174\3\0\2\305\54\0\1\306"+
    "\2\0\1\307\66\0\2\310\71\0\1\174\1\0\1\311"+
    "\61\0\1\244\52\0\1\312\56\0\1\313\76\0\1\314"+
    "\30\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
    "\1\315\1\166\3\7\1\305\1\316\3\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\1\7\1\317\2\7\1\320\2\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\310\1\321\3\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\4\7\1\0\1\7\1\166"+
    "\1\7\1\322\12\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\1\7\1\245\14\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\5\7\1\323\1\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\1\324\6\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\3\7\1\325\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\326\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\4\7\1\327\2\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\2\7\1\330\2\7\1\331\1\7\1\0\2\7\1\332"+
    "\1\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\1\333\6\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\334\1\335"+
    "\15\7\1\0\2\7\24\0\1\336\15\0\2\337\26\0"+
    "\2\7\1\0\1\7\12\0\1\340\1\0\7\7\1\0"+
    "\4\7\1\337\1\341\15\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\1\7\1\326\5\7"+
    "\1\0\4\7\1\0\6\7\1\265\7\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\342\1\0\7\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\1\7\1\251\5\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\3\7\1\343\3\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\3\7\1\251\3\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\5\7\1\344\1\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\3\7\1\345\3\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\27\0\1\346"+
    "\1\0\1\347\1\0\1\350\1\0\2\351\76\0\1\174"+
    "\45\0\1\352\36\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\1\7\1\353\1\7\1\354\1\7\1\251\1\7"+
    "\1\351\1\355\3\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\5\7\1\356"+
    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\4\7\1\357"+
    "\2\7\1\0\4\7\1\0\1\7\1\360\14\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\3\7\1\361\3\7\1\0\4\7\1\0\7\7\1\166"+
    "\6\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\1\7\1\166\3\7\1\53\1\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\33\0\1\174\36\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\5\7\1\166"+
    "\1\7\1\0\4\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\2\7\1\362"+
    "\1\7\1\363\2\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\3\7\1\364\3\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\3\7\1\245\3\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\7\7\1\0\3\7\1\365\1\0\16\7\1\0\2\7"+
    "\31\0\1\366\1\0\1\367\36\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\3\7\1\370\1\7\1\371\1\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\31\0\1\372"+
    "\40\0\2\7\1\0\1\7\12\0\1\7\1\0\3\7"+
    "\1\373\3\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\374\1\0\7\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\2\7\1\320\13\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\4\7\1\375\2\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\4\7\1\376\2\7"+
    "\1\377\1\u0100\3\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\u0101\1\u0102\15\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\u0103\1\u0104"+
    "\3\7\1\0\16\7\1\0\2\7\45\0\1\u0105\24\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\0\2\7\1\u0106\13\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\3\7\1\u0107\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\3\7"+
    "\1\u0108\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\4\7\1\u0109\2\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\5\7\1\u010a\1\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\3\7\1\u010b"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\u010c\1\74"+
    "\15\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\4\7\1\204\1\205\15\7"+
    "\1\0\2\7\34\0\1\174\35\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\6\7\1\166\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\7\0\1\242\44\0\2\242\1\0"+
    "\1\242\30\0\1\174\45\0\2\7\1\0\1\7\12\0"+
    "\1\166\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\4\7\1\u010d\2\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\35\0\2\u010e\33\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\u010e\1\u010f\3\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\340"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\0\3\7\1\u0110\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0111\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\u0112\1\0\1\u0113\6\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\3\7"+
    "\1\u0114\12\7\1\0\2\7\26\0\1\u0115\2\0\1\u0116"+
    "\40\0\2\7\1\0\1\7\12\0\1\7\1\0\1\u0117"+
    "\2\7\1\u0118\3\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\275\1\0"+
    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\0\13\7\1\u0119\2\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u011a\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\u011b"+
    "\1\u011c\15\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\2\7\1\u011d\4\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\5\7\1\u011e\1\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\44\0\1\u011f\25\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\1\7\1\253\14\7\1\0\2\7\24\0\1\u0120"+
    "\45\0\2\7\1\0\1\7\12\0\1\u0121\1\0\7\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\2\7\1\166\4\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u0122\1\0\7\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\50\0\1\u0123\21\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\5\7\1\132\10\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u0124\1\0\7\7\1\0\4\7"+
    "\1\0\3\7\1\251\12\7\1\0\2\7\33\0\1\u0125"+
    "\36\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
    "\1\360\1\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\24\0\1\u0126\74\0\2\u0127\51\0\1\u0128\101\0\2\337"+
    "\51\0\1\u0129\67\0\2\u012a\103\0\1\u012b\35\0\1\u012c"+
    "\65\0\1\u0123\37\0\2\7\1\0\1\7\12\0\1\u012d"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\u0127\1\u012e\3\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u012f\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\337"+
    "\1\341\15\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\3\7\1\u0130\3\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\u012a\1\u0131\3\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\4\7\1\0\13\7\1\u0114"+
    "\2\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\2\7\1\u0132\4\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\4\7\1\132\2\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\1\u0111\6\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\4\7\1\u0133\2\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\2\7\1\u0134\1\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\u0135\1\u0136\1\u0137\2\7\1\0\2\7"+
    "\1\u0138\13\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\5\7\1\u0139\1\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\4\7\1\u013a\2\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\41\0\1\204\21\0\1\u013b"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\0\3\7\1\205\1\0\16\7\1\0\1\7\1\u013c"+
    "\32\0\1\174\64\0\1\u013d\36\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\4\7\1\166\2\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\5\7\1\u013e\1\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\3\7\1\u013f\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u0140\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\u0141\1\0"+
    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\u0142\1\u0143\15\7\1\0\2\7\24\0\1\u0144"+
    "\63\0\1\u0145\14\0\1\174\46\0\1\336\63\0\1\314"+
    "\100\0\1\u0146\30\0\2\7\1\0\1\7\12\0\1\u0147"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u0148\1\0\7\7"+
    "\1\0\3\7\1\166\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\325\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\3\7\1\u0149"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\13\7"+
    "\1\245\2\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\3\7\1\166\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\1\7\1\u014a\2\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\2\7\1\u014b\1\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\1\7\1\u014c\2\7\1\0"+
    "\3\7\1\u014d\2\7\1\166\7\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\0\4\7\1\u014e\11\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\2\7\1\u014f"+
    "\4\7\1\0\4\7\1\0\16\7\1\0\2\7\11\0"+
    "\1\u0150\100\0\1\u0151\43\0\2\7\1\0\1\u0152\12\0"+
    "\1\7\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\1\u0153\6\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\50\0\1\174\21\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\4\7\1\0\5\7\1\166\10\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\4\7\1\245\1\166\1\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\1\7\1\u0154\2\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\1\u0155\6\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\35\0\2\u0156\33\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\u0156\1\u0157\3\7\1\0"+
    "\16\7\1\0\2\7\44\0\1\367\25\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\1\7\1\371\14\7\1\0\2\7\42\0\2\u0158\26\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\u0158\1\u0159\15\7\1\0\2\7\41\0\1\u0123"+
    "\30\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\0\3\7\1\132\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\1\u015a\6\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\1\7\1\166\14\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u015b\1\0\7\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u015c\1\0\7\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\2\7\1\122\1\7\1\0\16\7"+
    "\1\0\2\7\27\0\1\174\42\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\1\u015d\6\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\31\0\1\u015e\40\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\3\7\1\u015f\3\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\u0160"+
    "\1\u0161\15\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\3\7\1\u0162\3\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\3\7"+
    "\1\u0163\12\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\2\7\1\245\4\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\30\0\1\u0164\75\0\2\u0165"+
    "\26\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
    "\1\u0166\4\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\0\4\7\1\u0165\1\u0167\15\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\3\7\1\u0168"+
    "\3\7\1\0\4\7\1\0\3\7\1\u014d\12\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\4\7\1\253\2\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\37\0\1\u0169\32\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\1\7\1\u016a\2\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\u016b\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\7\7\1\u016c\1\u016d\3\7\1\0\16\7\1\0\2\7"+
    "\35\0\2\u016e\33\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\u016e\1\u016f\3\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\4\7\1\u0170\2\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\31\0\1\174\40\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\4\7\1\u0171\2\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\41\0\1\174\61\0\1\u0123\66\0"+
    "\2\u0172\65\0\1\u0173\42\0\1\u0174\70\0\1\u0175\62\0"+
    "\1\244\63\0\1\u0176\41\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\1\7\1\132\2\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\4\7\1\u0172\1\u0177\15\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\4\7\1\0\2\7\1\u0178\13\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\u0179"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\3\7"+
    "\1\u017a\3\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\2\7"+
    "\1\u017b\4\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\u017c\1\0\7\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\1\7\1\205\14\7\1\0\2\7\31\0\1\u017d"+
    "\40\0\2\7\1\0\1\7\12\0\1\7\1\0\3\7"+
    "\1\u017e\3\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\1\u017f"+
    "\6\7\1\0\4\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0180\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\3\7\1\u0181\3\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\u0152\12\0\1\7\1\0\1\u0182\6\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\40\0\1\244\31\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\2\7"+
    "\1\245\1\7\1\0\16\7\1\0\2\7\56\0\1\174"+
    "\13\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\0\4\7\1\0\13\7\1\166\2\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\0\4\7\1\0\3\7\1\u0183\12\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\3\7"+
    "\1\u0184\3\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\4\7"+
    "\1\u0185\2\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\41\0\1\204\30\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\3\7\1\205\1\0\16\7\1\0"+
    "\2\7\52\0\1\174\67\0\1\u0186\37\0\1\244\37\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\0\7\7\1\166\6\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\0\13\7\1\u0187\2\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\4\7\1\245"+
    "\2\7\1\0\4\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\0\5\7\1\u0188\10\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\u0189\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\5\7\1\u018a\10\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\u018b"+
    "\1\u018c\15\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\125\1\0\7\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\u018d"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\30\0\1\u018e\65\0\1\235\37\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\2\7\1\u018f\4\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\4\7\1\236\2\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\u0190\1\0\7\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\4\7\1\0\1\7\1\u0191\14\7"+
    "\1\0\2\7\47\0\1\u0192\22\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\4\7"+
    "\1\u0193\11\7\1\0\2\7\31\0\1\u0194\40\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\3\7\1\u0195\3\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\3\7\1\u0196\3\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\u0197\1\u0198\15\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\4\7\1\u016a\2\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\1\7\1\u0199"+
    "\2\7\1\0\16\7\1\0\2\7\35\0\2\174\33\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\174"+
    "\1\166\3\7\1\0\16\7\1\0\2\7\33\0\1\u019a"+
    "\36\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
    "\1\u019b\1\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\7\7"+
    "\1\0\4\7\1\140\1\150\15\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\1\73\6\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\30\0\1\u019c"+
    "\66\0\1\u019d\36\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\2\7\1\u019e\4\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\5\7\1\u019f\1\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\116"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\26\0\1\u01a0\43\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\1\275\6\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\30\0\1\u01a1\22\0\1\u01a2\16\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\2\7\1\u01a3\4\7\1\0"+
    "\4\7\1\0\10\7\1\u01a4\5\7\1\0\2\7\31\0"+
    "\1\u01a5\40\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\3\7\1\u01a6\3\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\u01a7\1\0"+
    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\255\1\256\15\7\1\0\2\7\41\0\1\u01a8"+
    "\66\0\1\u01a9\51\0\1\u01aa\73\0\2\u01ab\26\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\3\7"+
    "\1\u01ac\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\1\7\1\u01ad\14\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\4\7\1\u01ae\2\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\u01ab"+
    "\1\u0190\15\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\5\7\1\u01af\1\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\32\0\1\u01b0\37\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\4\7\1\u01b1\2\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\3\7\1\u01b2\3\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\4\7\1\u0199\2\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\1\7"+
    "\1\170\2\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\15\7\1\315\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\1\u01b3\6\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\24\0\1\u01b4\45\0\2\7"+
    "\1\0\1\7\12\0\1\u01b5\1\0\7\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\74\1\0\7\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\1\340\6\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\33\0\1\367\36\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\5\7\1\371\1\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\1\205\6\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\24\0\1\u01b6\45\0\2\7\1\0\1\7"+
    "\12\0\1\u01b7\1\0\7\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\5\7\1\132\1\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\u01b8"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\41\0\1\u01b9\30\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\3\7\1\u01ba\1\0\16\7\1\0"+
    "\2\7\42\0\2\u01bb\26\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\4\7\1\u01bb\1\u01bc\15\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\4\7\1\0\11\7\2\166\3\7"+
    "\1\0\2\7\56\0\1\204\13\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\13\7"+
    "\1\205\2\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\3\7\1\253\3\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\37\0\1\u01bd\32\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\1\7"+
    "\1\u01be\2\7\1\0\16\7\1\0\2\7\41\0\1\u01bf"+
    "\61\0\1\u01c0\32\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\3\7\1\u01c1\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\7\7\1\0\1\7\1\u01c2\2\7\1\0\16\7\1\0"+
    "\2\7\30\0\1\174\61\0\1\u01c3\76\0\1\u01c4\30\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\1\u01c5\6\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\3\7"+
    "\1\u01c6\1\0\16\7\1\0\2\7\26\0\1\u01c7\43\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\1\u01c8\6\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\5\7\1\u01c9\1\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\33\0\1\u01a9"+
    "\41\0\1\u01ca\114\0\2\u01cb\53\0\1\u0123\36\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\5\7\1\u01ad\1\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\u01cc\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\u01cb\1\u01cd"+
    "\15\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\3\7\1\u01ce\3\7\1\0\1\7\1\236"+
    "\2\7\1\0\16\7\1\0\2\7\26\0\1\u0176\43\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\1\u017b\6\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\u01cf\1\0\7\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\6\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\1\7\1\u01d0\2\7"+
    "\1\0\16\7\1\0\2\7\32\0\1\u01d1\37\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\4\7\1\u01d2\2\7"+
    "\1\0\4\7\1\0\16\7\1\0\2\7\33\0\1\u01d3"+
    "\36\0\2\7\1\0\1\7\12\0\1\7\1\0\5\7"+
    "\1\u01d4\1\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\6\0\2\7\1\0\1\7\12\0\1\7\1\0\3\7"+
    "\1\u01d5\3\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\32\0\1\u010c\37\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\4\7\1\74\2\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\41\0\1\u01d6\30\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\3\7\1\u01d7\1\0"+
    "\16\7\1\0\2\7\32\0\1\u01d8\37\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\4\7\1\u01d9\2\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\47\0\1\174\45\0"+
    "\1\u01da\40\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\7\7\1\0\4\7\1\0\4\7\1\166\11\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\3\7\1\u01db\3\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\31\0\1\u01dc\64\0\1\u01dd\37\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\3\7\1\u01de\3\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\4\7\1\u0108\2\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\44\0\1\175\25\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\4\7\1\0\1\7\1\122\14\7\1\0\2\7\6\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\0"+
    "\1\7\1\u01df\2\7\1\0\16\7\1\0\2\7\40\0"+
    "\1\u01e0\56\0\1\u01e1\36\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\7\7\1\0\2\7\1\u01e2\1\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\5\7\1\u01e3\1\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\6\0\2\7\1\0\1\u01e4\12\0"+
    "\1\7\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\5\7\1\u01a3\1\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\7\7\1\0\1\7\1\u01e5\2\7\1\0\16\7\1\0"+
    "\2\7\54\0\1\174\2\0\1\174\12\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\0\4\7\1\0"+
    "\11\7\1\166\2\7\1\166\1\7\1\0\2\7\56\0"+
    "\1\u01e6\13\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\7\7\1\0\4\7\1\0\13\7\1\u01e7\2\7\1\0"+
    "\2\7\6\0\2\7\1\0\1\7\12\0\1\u01e8\1\0"+
    "\7\7\1\0\4\7\1\0\16\7\1\0\2\7\33\0"+
    "\1\u011f\36\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\5\7\1\253\1\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\24\0\1\u01e9\45\0\2\7\1\0\1\7\12\0"+
    "\1\u01ea\1\0\7\7\1\0\4\7\1\0\16\7\1\0"+
    "\2\7\32\0\1\u019c\37\0\2\7\1\0\1\7\12\0"+
    "\1\7\1\0\4\7\1\u019e\2\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\24\0\1\u011f\103\0\1\174\25\0"+
    "\2\7\1\0\1\7\12\0\1\253\1\0\7\7\1\0"+
    "\4\7\1\0\16\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\u015f\1\0\7\7\1\0\4\7\1\0"+
    "\16\7\1\0\2\7\35\0\2\u01eb\103\0\1\u011f\13\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\7\7\1\u01eb"+
    "\1\265\3\7\1\0\16\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\13\7\1\253\2\7\1\0\2\7\6\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\1\7\1\u01a3\1\7"+
    "\1\u01ec\3\7\1\0\2\7\1\u01e2\1\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\u01ed"+
    "\1\0\7\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\31\0\1\u01ee\40\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\3\7\1\u01ef\3\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\6\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\4\7\1\u015f\2\7\1\0\4\7\1\0\16\7"+
    "\1\0\2\7\44\0\1\u01f0\25\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\1\7"+
    "\1\u0154\14\7\1\0\2\7\24\0\1\u01f1\45\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\u01f2\1\u01f3\15\7\1\0\2\7\6\0\2\7\1\0"+
    "\1\7\12\0\1\7\1\0\7\7\1\u015e\1\u015f\3\7"+
    "\1\0\16\7\1\0\2\7\50\0\1\u011f\21\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\0\4\7"+
    "\1\0\5\7\1\253\10\7\1\0\2\7\24\0\1\u01ab"+
    "\71\0\1\u011f\75\0\1\u01f4\25\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\1\7"+
    "\1\u01f5\14\7\1\0\2\7\24\0\1\u01f6\45\0\2\7"+
    "\1\0\1\7\12\0\1\u01f7\1\0\7\7\1\0\4\7"+
    "\1\0\16\7\1\0\2\7\35\0\2\u01f8\33\0\2\7"+
    "\1\0\1\7\12\0\1\7\1\0\7\7\1\u01f8\1\u01f9"+
    "\3\7\1\0\16\7\1\0\2\7\31\0\1\u01fa\40\0"+
    "\2\7\1\0\1\7\12\0\1\7\1\0\3\7\1\u01fb"+
    "\3\7\1\0\4\7\1\0\16\7\1\0\2\7\26\0"+
    "\1\u01fc\43\0\2\7\1\0\1\7\12\0\1\7\1\0"+
    "\1\u01fd\6\7\1\0\4\7\1\0\16\7\1\0\2\7"+
    "\44\0\1\u01fe\25\0\2\7\1\0\1\7\12\0\1\7"+
    "\1\0\7\7\1\0\4\7\1\0\1\7\1\u01ff\14\7"+
    "\1\0\2\7\51\0\1\u011f\20\0\2\7\1\0\1\7"+
    "\12\0\1\7\1\0\7\7\1\0\4\7\1\0\6\7"+
    "\1\253\7\7\1\0\2\7\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25220];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\4\1\1\11\3\1\1\11\34\1\2\11"+
    "\2\1\1\11\2\1\1\11\2\1\1\11\1\1\1\0"+
    "\1\1\1\11\15\1\1\0\3\1\1\0\6\1\1\0"+
    "\3\1\1\0\4\1\10\0\15\1\1\0\12\1\1\11"+
    "\2\0\5\1\1\0\5\1\1\0\1\1\1\0\7\1"+
    "\1\0\10\1\1\0\1\1\3\11\1\1\2\0\2\1"+
    "\1\0\5\1\1\0\3\1\1\0\7\1\1\0\1\1"+
    "\1\0\3\1\1\0\2\1\1\0\1\1\11\0\17\1"+
    "\1\0\1\1\2\0\6\1\1\0\1\1\3\0\14\1"+
    "\1\0\2\1\1\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\6\1\1\0\1\1\1\0\6\1"+
    "\2\0\4\1\1\0\3\1\1\11\3\1\1\0\1\1"+
    "\10\0\10\1\1\0\5\1\1\0\1\1\1\0\4\1"+
    "\1\0\1\1\3\0\11\1\2\0\4\1\1\0\1\1"+
    "\1\0\5\1\1\0\1\1\1\0\3\1\2\0\3\1"+
    "\1\0\2\1\1\0\1\1\1\0\3\1\1\0\1\1"+
    "\3\0\6\1\1\0\10\1\1\0\4\1\1\0\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\1\0\1\1\2\0\2\1\3\0\2\1\1\0\2\1"+
    "\4\0\4\1\1\0\3\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\0\2\1"+
    "\2\0\2\1\1\0\2\1\2\0\7\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\2\0\2\1\2\0\4\1"+
    "\1\0\2\1\1\0\1\1\1\0\2\1\1\0\1\1"+
    "\3\0\1\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[511];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public SQLTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Overridden to return <code>true</code> so paren matching occurs for
	 * SQL.
	 *
	 * @return <code>true</code> always.
	 */
	@Override
	public boolean getCurlyBracesDenoteCodeBlocks(int languageIndex) {
		return true;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "--", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = STRING;
				start = text.offset;
				break;
			case Token.LITERAL_CHAR:
				state = CHAR;
				start = text.offset;
				break;
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SQLTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public SQLTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 206) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 23: break;
        case 2: 
          { addNullToken(); return firstToken;
          }
        case 24: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 25: break;
        case 4: 
          { addToken(Token.WHITESPACE);
          }
        case 26: break;
        case 5: 
          { addToken(Token.OPERATOR);
          }
        case 27: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 28: break;
        case 7: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 29: break;
        case 8: 
          { start = zzMarkedPos-1; yybegin(STRING);
          }
        case 30: break;
        case 9: 
          { start = zzMarkedPos-1; yybegin(CHAR);
          }
        case 31: break;
        case 10: 
          { addToken(Token.ERROR_IDENTIFIER); addNullToken(); return firstToken;
          }
        case 32: break;
        case 11: 
          { 
          }
        case 33: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
          }
        case 34: break;
        case 13: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 35: break;
        case 14: 
          { addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
          }
        case 36: break;
        case 15: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead, Token.LITERAL_CHAR);
          }
        case 37: break;
        case 16: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 38: break;
        case 17: 
          { addToken(Token.COMMENT_EOL);
          }
        case 39: break;
        case 18: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 40: break;
        case 19: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 20: 
          { addToken(Token.PREPROCESSOR);
          }
        case 42: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 43: break;
        case 22: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 512: break;
            case STRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 513: break;
            case CHAR: {
              addToken(start,zzStartRead-1, Token.LITERAL_CHAR); return firstToken;
            }
            case 514: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 515: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

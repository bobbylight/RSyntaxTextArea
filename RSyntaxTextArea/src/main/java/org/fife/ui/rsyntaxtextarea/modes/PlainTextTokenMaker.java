/* The following code was generated by JFlex 1.4.1 on 1/13/23 7:22 PM */

/*
 * 11/07/2008
 *
 * PlainTextTokenMaker.flex - Scanner for plain text files.
 *
 * This library is distributed under a modified BSD license.  See the included
 * LICENSE file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import java.text.BreakIterator;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for plain text files.
 *
 * This implementation was created using
 * <a href="https://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>), so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>PlainTextTokenMaker.java</code> file will contain
 *       two definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.5
 *
 */

public class PlainTextTokenMaker extends TokenMakerBase {

	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		TokenImpl t = new TokenImpl();
		TokenImpl curr = t;

		BreakIterator boundary = BreakIterator.getLineInstance();
		boundary.setText(text);

		int start = boundary.first();
		for (int end = boundary.next(); end != BreakIterator.DONE; start = end, end = boundary.next()) {
			int type = Character.isWhitespace(text.charAt(start - text.offset)) ? TokenTypes.WHITESPACE : TokenTypes.IDENTIFIER;
			TokenImpl newToken = new TokenImpl(text, start, end - 1, startOffset + start - text.offset, type, 0);
			System.out.println(">>> " + newToken);
			curr.setNextToken(newToken);
			curr = newToken;
		}

		return t.getNextToken() == null ? new TokenImpl() : t.getNextToken();
	}
}

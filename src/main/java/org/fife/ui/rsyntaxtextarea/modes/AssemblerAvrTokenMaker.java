/* The following code was generated by JFlex 1.6.1 */

/*
 * 19/10/2015
 *
 * AssemblerAvrTokenMaker.java - An object that can take a chunk of text and
 * return a linked list of tokens representing Atmel AVR assembler.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * This class takes plain text and returns tokens representing AVR
 * assembler.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>AssemblerAvrTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Oleg Trifonov
 * @version 0.1
 *
 */

public class AssemblerAvrTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;
  public static final int EOL_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\12\1\63\1\64\1\63\22\0\1\13\1\16\1\5"+
    "\1\14\1\20\1\4\1\16\1\6\2\14\1\11\1\17\1\15\1\17"+
    "\1\35\1\10\1\60\1\61\1\61\1\62\1\2\1\2\1\2\1\2"+
    "\1\2\1\2\1\33\1\7\1\36\1\16\1\36\2\14\1\47\1\37"+
    "\1\41\1\44\1\32\1\26\1\42\1\21\1\30\1\1\1\57\1\31"+
    "\1\46\1\45\1\51\1\23\1\52\1\50\1\25\1\22\1\53\1\55"+
    "\1\34\1\54\1\40\1\43\1\15\1\0\1\15\1\36\1\3\1\0"+
    "\1\47\1\37\1\41\1\44\1\32\1\66\1\42\1\65\1\30\1\1"+
    "\1\57\1\31\1\46\1\45\1\51\1\23\1\52\1\50\1\25\1\22"+
    "\1\53\1\55\1\67\1\54\1\40\1\43\1\0\1\36\1\0\1\16"+
    "\6\0\1\63\252\0\2\27\115\0\1\24\u1ea8\0\1\63\1\63\u0100\0"+
    "\1\56\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\3\1\7\1\10\25\1\1\11\2\12\1\13\7\12"+
    "\1\14\6\12\1\1\1\15\3\1\1\16\1\17\1\20"+
    "\1\21\3\1\1\22\1\23\6\0\1\22\1\23\7\1"+
    "\2\0\1\22\1\1\1\22\3\1\1\22\4\1\15\0"+
    "\5\1\1\22\11\1\1\23\2\1\2\23\1\22\1\1"+
    "\1\24\4\12\4\0\4\12\4\0\1\22\2\1\1\22"+
    "\1\1\1\22\3\0\3\22\1\0\2\1\3\22\1\1"+
    "\1\0\4\1\1\0\1\15\15\0\1\25\6\0\10\1"+
    "\2\22\3\1\4\12\4\0\4\12\4\0\2\1\1\0"+
    "\1\23\1\1\1\0\2\1\1\23\1\15\17\0\1\1"+
    "\2\22\1\1\3\12\1\26\2\0\3\12\1\27\2\0"+
    "\3\1\1\0\2\15\3\0\1\15\5\0\1\12\2\0"+
    "\1\12\2\0\2\1\10\0\2\1\3\0\10\1\2\11";

  private static int [] zzUnpackAction() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\340\0\u01c0\0\u01f8\0\u0230\0\u0268\0\340\0\u02a0\0\u02d8"+
    "\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498"+
    "\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658"+
    "\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\340"+
    "\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\u0930\0\u0968\0\340"+
    "\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u0af0"+
    "\0\u0b28\0\u0b60\0\u0b98\0\340\0\340\0\340\0\340\0\u0bd0"+
    "\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58\0\u0d90"+
    "\0\u0dc8\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50"+
    "\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110"+
    "\0\u0e70\0\u1148\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298"+
    "\0\u12d0\0\u1308\0\u1340\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u1768\0\u17a0\0\u17d8"+
    "\0\u1810\0\u1848\0\u1880\0\u18b8\0\u02d8\0\u18f0\0\u1928\0\u1960"+
    "\0\u1998\0\u19d0\0\u1a08\0\340\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8"+
    "\0\u1b20\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u02d8\0\u1dc0\0\u1df8\0\u0af0"+
    "\0\u1e30\0\340\0\u1e68\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u1768\0\u20d0\0\u2108"+
    "\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u22c8"+
    "\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488"+
    "\0\u24c0\0\u24f8\0\u2530\0\340\0\u2568\0\u25a0\0\u25d8\0\u2610"+
    "\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\u19d0\0\u2808\0\u2840\0\u2878\0\u28b0\0\u2840\0\u28e8\0\u2920"+
    "\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0"+
    "\0\u2b18\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0"+
    "\0\u2cd8\0\u2d10\0\340\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u0af0"+
    "\0\340\0\u2e28\0\u2e60\0\u2e98\0\u2ed0\0\u2f08\0\u2f40\0\u2f78"+
    "\0\u2fb0\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138"+
    "\0\u3170\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8"+
    "\0\u34f0\0\u3528\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640\0\u3678"+
    "\0\u36b0\0\u36e8\0\u3720\0\u3758\0\u3790\0\u37c8\0\u3800\0\u3838"+
    "\0\u32f8\0\u3870\0\u38a8\0\u3448\0\u38e0\0\u3918\0\u3950\0\u3988"+
    "\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48"+
    "\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u3c98\0\u3cd0\0\u3d08"+
    "\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u0af0\0\u02d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\11\1\16\1\17\2\5\2\11\1\5\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\5\1\32\1\33\1\11\1\34\1\20\1\35"+
    "\2\20\1\36\1\37\1\40\1\41\1\42\1\43\2\20"+
    "\1\44\1\20\1\5\1\20\3\7\1\0\1\17\1\20"+
    "\1\25\1\32\1\5\1\6\1\7\1\10\1\45\1\12"+
    "\1\13\1\14\1\15\1\11\1\16\1\17\2\5\2\11"+
    "\1\5\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\5\1\32\1\33\1\11\1\34"+
    "\1\20\1\35\2\20\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\2\20\1\44\1\20\1\5\1\20\3\7\1\0"+
    "\1\17\1\20\1\25\1\32\11\46\1\47\1\50\6\46"+
    "\1\51\4\46\1\52\5\46\1\53\30\46\1\54\1\55"+
    "\1\56\12\57\1\60\6\57\1\61\4\57\1\62\5\57"+
    "\1\63\30\57\1\64\1\65\1\66\70\0\1\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\67\2\20\1\67\3\20\1\70\1\20\1\0"+
    "\1\67\7\20\1\71\7\20\1\67\4\20\1\67\1\0"+
    "\3\20\1\67\1\20\1\7\1\20\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\1\67\3\20\1\67\2\20"+
    "\1\67\3\20\1\70\1\20\1\0\1\67\17\20\1\67"+
    "\1\20\3\7\1\67\1\0\3\20\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\72\1\73\1\20\1\67\3\20\1\70\1\20\1\0"+
    "\1\67\17\20\1\67\4\20\1\67\1\0\3\20\5\12"+
    "\1\74\62\12\6\13\1\75\61\13\12\14\1\0\50\14"+
    "\2\0\3\14\10\0\1\76\1\77\71\0\1\17\50\0"+
    "\1\17\3\0\1\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\3\20\1\67\2\20\1\67"+
    "\3\20\1\70\1\20\1\0\1\67\17\20\1\67\4\20"+
    "\1\67\1\0\3\20\1\67\3\20\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\1\67\3\20\1\100\1\101"+
    "\1\20\1\67\3\20\1\70\1\20\1\0\1\67\17\20"+
    "\1\67\4\20\1\67\1\0\3\20\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\67\3\20\1\70\1\20\1\0\1\67"+
    "\12\20\1\71\1\20\1\102\2\20\1\67\4\20\1\67"+
    "\1\0\3\20\22\0\1\103\1\104\5\0\1\105\1\106"+
    "\1\0\1\107\2\0\1\110\10\0\1\111\2\0\1\112"+
    "\13\0\1\107\1\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\1\20\1\113\1\114\1\67"+
    "\2\20\1\67\1\20\1\115\1\116\1\70\1\117\1\0"+
    "\1\67\1\120\10\20\1\121\2\20\1\122\2\20\1\67"+
    "\4\20\1\67\1\0\2\20\1\117\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\67\3\20\1\70\1\20\1\0\1\67"+
    "\7\20\1\123\7\20\1\67\4\20\1\67\1\0\3\20"+
    "\1\0\1\124\37\0\1\125\3\0\1\126\22\0\1\67"+
    "\1\6\2\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\67\2\20\1\67\3\20\1\70"+
    "\1\20\1\0\1\67\2\20\1\127\3\20\1\130\10\20"+
    "\1\67\4\20\1\67\1\0\3\20\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\2\20"+
    "\1\131\1\132\1\133\1\20\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\5\20\1\134\2\20\1\135\6\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\136\1\137\2\20\1\70\1\20\1\0\1\67"+
    "\12\20\1\140\4\20\1\67\4\20\1\67\1\0\3\20"+
    "\1\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\67\2\20\1\67\3\20\1\70"+
    "\1\20\1\0\1\67\5\20\1\140\11\20\1\67\4\20"+
    "\1\67\1\0\3\20\24\0\2\141\1\0\2\142\1\143"+
    "\1\144\1\0\1\145\2\0\1\146\1\0\1\147\1\150"+
    "\1\0\1\151\1\152\1\153\2\0\1\154\1\0\1\155"+
    "\13\0\1\145\1\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\3\20\1\156\1\157\1\20"+
    "\1\67\1\20\1\160\1\20\1\70\1\20\1\0\1\67"+
    "\2\20\1\161\6\20\1\162\5\20\1\67\4\20\1\67"+
    "\1\0\3\20\1\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\2\20\1\163\1\67\2\20"+
    "\1\67\1\20\1\116\1\20\1\70\1\20\1\0\1\67"+
    "\1\164\7\20\1\165\1\20\1\131\4\20\1\67\4\20"+
    "\1\67\1\0\3\20\1\67\3\20\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\1\67\3\20\1\67\2\20"+
    "\1\67\2\20\1\166\1\70\1\20\1\0\1\67\17\20"+
    "\1\67\4\20\1\67\1\0\3\20\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\67\2\20\1\167\1\70\1\20\1\0"+
    "\1\67\12\20\1\71\4\20\1\67\4\20\1\67\1\0"+
    "\3\20\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\12\20\1\170\1\20\1\171"+
    "\2\20\1\67\4\20\1\67\1\0\3\20\1\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\172\1\140\1\20\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\5\20\1\173\1\174\10\20\1\67\4\20"+
    "\1\67\1\0\3\20\1\67\1\6\1\175\1\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\67\2\20\1\176\1\70\1\20\1\0"+
    "\1\67\2\20\1\127\5\20\1\177\1\20\1\133\4\20"+
    "\1\67\1\20\1\175\1\200\1\201\1\67\1\0\3\20"+
    "\1\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\67\2\20\1\67\3\20\1\70"+
    "\1\20\1\0\1\67\11\20\1\202\2\20\1\101\2\20"+
    "\1\67\4\20\1\67\1\0\3\20\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\67\3\20\1\70\1\20\1\0\1\67"+
    "\2\20\1\203\14\20\1\67\4\20\1\67\1\0\3\20"+
    "\1\0\3\45\15\0\3\45\1\0\2\45\1\0\3\45"+
    "\1\0\1\45\2\0\17\45\1\0\4\45\2\0\3\45"+
    "\11\46\2\0\52\46\13\0\1\204\57\0\11\46\2\0"+
    "\7\46\1\205\42\46\3\0\11\46\2\0\7\46\1\206"+
    "\4\46\2\207\34\46\3\0\11\46\2\0\21\46\1\210"+
    "\30\46\2\0\1\211\22\0\1\212\67\0\1\213\4\0"+
    "\2\214\73\0\1\211\32\0\1\211\12\57\1\0\52\57"+
    "\3\0\12\57\1\0\7\57\1\215\42\57\3\0\12\57"+
    "\1\0\7\57\1\216\4\57\2\217\34\57\3\0\12\57"+
    "\1\0\21\57\1\220\30\57\2\0\1\221\22\0\1\222"+
    "\67\0\1\223\4\0\2\224\73\0\1\221\32\0\1\221"+
    "\4\67\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\15\67\1\0\26\67\1\0\4\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\2\20\1\225"+
    "\1\67\2\20\1\67\3\20\1\70\1\20\1\0\1\67"+
    "\17\20\1\67\4\20\1\67\1\0\3\20\4\67\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\6\67\1\226"+
    "\6\67\1\0\26\67\1\0\1\67\1\226\2\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\67\1\20\1\227\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\17\20\1\67\4\20\1\67\1\0\1\20"+
    "\1\227\1\20\4\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\2\67\1\230\12\67\1\0\26\67\1\0"+
    "\4\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\1\20\1\225\1\20\1\67\2\20\1\67"+
    "\3\20\1\70\1\20\1\0\1\67\17\20\1\67\4\20"+
    "\1\67\1\0\3\20\1\67\3\20\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\1\67\3\20\1\231\1\203"+
    "\1\20\1\67\3\20\1\70\1\20\1\0\1\67\17\20"+
    "\1\67\4\20\1\67\1\0\3\20\24\0\2\232\16\0"+
    "\1\232\2\0\1\233\66\0\1\232\53\0\1\234\56\0"+
    "\2\232\1\0\2\232\1\0\2\232\10\0\1\232\1\0"+
    "\1\232\1\0\1\232\2\0\1\232\4\0\1\232\7\0"+
    "\1\232\51\0\1\235\47\0\2\236\10\0\1\237\6\0"+
    "\1\240\51\0\1\241\74\0\1\237\30\0\1\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\230\1\225\1\20\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\5\20\1\225\2\20\1\242\6\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\67\3\20\1\70\1\20\1\0\1\67\7\20"+
    "\1\225\7\20\1\67\4\20\1\67\1\0\3\20\1\67"+
    "\3\20\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\1\67\3\20\1\67\2\20\1\67\2\20\1\243\1\70"+
    "\1\20\1\0\1\67\17\20\1\67\4\20\1\67\1\0"+
    "\3\20\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\2\225\1\20\1\230\1\225\1\20"+
    "\1\230\1\225\2\20\1\70\1\20\1\0\1\67\2\20"+
    "\1\225\1\20\1\225\1\20\1\225\2\20\1\225\4\20"+
    "\1\225\1\67\4\20\1\67\1\0\1\225\2\20\1\67"+
    "\3\20\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\1\67\3\20\1\67\2\20\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\10\20\1\71\6\20\1\67\4\20\1\67"+
    "\1\0\3\20\1\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\3\20\1\67\2\20\1\244"+
    "\1\245\2\20\1\70\1\20\1\0\1\67\2\20\1\202"+
    "\6\20\1\246\5\20\1\67\4\20\1\67\1\0\3\20"+
    "\1\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\67\2\20\1\67\2\20\1\247"+
    "\1\70\1\20\1\0\1\67\17\20\1\67\4\20\1\67"+
    "\1\0\3\20\1\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\3\20\1\67\2\20\1\67"+
    "\3\20\1\70\1\20\1\0\1\67\1\202\16\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\67\3\20\1\70\1\20\1\0\1\67\14\20"+
    "\1\171\2\20\1\67\4\20\1\67\1\0\3\20\46\0"+
    "\1\235\70\0\1\250\61\0\1\232\26\0\1\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\67\2\20\1\67\3\20\1\70\1\20\1\0"+
    "\1\67\10\20\1\165\6\20\1\67\4\20\1\67\1\0"+
    "\3\20\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\2\20\1\225\14\20\1\67"+
    "\4\20\1\67\1\0\3\20\4\67\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\11\67\1\230\3\67\1\0"+
    "\12\67\1\230\13\67\1\0\4\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\67\1\20\1\225\1\20\1\70\1\20\1\0"+
    "\1\67\11\20\1\225\5\20\1\67\4\20\1\67\1\0"+
    "\3\20\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\230\1\225\1\20\1\230"+
    "\1\225\2\20\1\70\1\20\1\0\1\67\5\20\1\225"+
    "\11\20\1\67\4\20\1\67\1\0\3\20\1\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\1\20\1\225\1\20\1\230\1\225\1\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\2\20\1\225\14\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\1\251\2\67\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\15\67\1\0"+
    "\3\67\1\252\3\67\1\253\16\67\1\0\4\67\1\6"+
    "\2\20\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\1\67\3\20\1\67\2\20\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\2\20\1\127\3\20\1\254\10\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\67\3\20\1\70\1\20\1\0\1\67\11\20"+
    "\1\225\5\20\1\67\4\20\1\67\1\0\3\20\32\0"+
    "\1\255\63\0\1\256\16\0\1\257\20\0\1\256\30\0"+
    "\2\260\63\0\2\261\3\0\1\262\13\0\1\263\2\0"+
    "\1\264\1\0\1\265\1\0\1\266\62\0\1\267\60\0"+
    "\1\270\53\0\2\271\73\0\1\272\62\0\2\261\4\0"+
    "\1\273\1\0\1\274\2\0\1\274\4\0\1\274\5\0"+
    "\1\274\14\0\1\274\51\0\1\275\50\0\1\276\14\0"+
    "\1\277\70\0\1\300\4\0\1\301\57\0\1\302\22\0"+
    "\4\67\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\2\67\1\230\7\67\1\100\2\67\1\0\26\67\1\0"+
    "\4\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\1\20\1\225\1\20\1\67\2\20\1\67"+
    "\2\20\1\101\1\70\1\20\1\0\1\67\17\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\67\3\20\1\70\1\20\1\0\1\67\5\20"+
    "\1\225\11\20\1\67\4\20\1\67\1\0\3\20\1\67"+
    "\3\20\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\1\67\3\20\1\67\2\20\1\67\1\20\1\140\1\20"+
    "\1\70\1\20\1\0\1\67\17\20\1\67\4\20\1\67"+
    "\1\0\3\20\1\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\2\166\1\303\1\231\1\203"+
    "\1\20\1\304\1\305\1\306\1\307\1\70\1\20\1\0"+
    "\1\67\1\166\1\20\1\166\1\310\2\20\1\310\1\311"+
    "\6\20\1\166\1\67\4\20\1\67\1\0\1\166\2\20"+
    "\1\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\312\1\310\1\20\1\230\1\225"+
    "\2\20\1\70\1\20\1\0\1\67\2\20\1\225\14\20"+
    "\1\67\4\20\1\67\1\0\3\20\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\230\1\225\2\20\1\70\1\20\1\0"+
    "\1\67\11\20\1\225\5\20\1\67\4\20\1\67\1\0"+
    "\3\20\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\1\20"+
    "\1\303\1\20\1\70\1\20\1\0\1\67\17\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\230"+
    "\1\225\1\20\1\67\3\20\1\70\1\20\1\0\1\67"+
    "\2\20\1\225\14\20\1\67\4\20\1\67\1\0\3\20"+
    "\1\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\67\2\20\1\67\3\20\1\70"+
    "\1\20\1\0\1\67\3\20\1\225\13\20\1\67\4\20"+
    "\1\67\1\0\3\20\1\67\3\20\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\1\67\3\20\1\67\2\20"+
    "\1\67\3\20\1\70\1\20\1\0\1\67\16\20\1\313"+
    "\1\67\4\20\1\67\1\0\3\20\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\67\1\20\1\314\1\20\1\70\1\20"+
    "\1\0\1\67\17\20\1\67\4\20\1\67\1\0\3\20"+
    "\4\67\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\15\67\1\0\12\67\1\230\13\67\1\0\4\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\67\2\20\1\315\1\316\2\20\1\70\1\20"+
    "\1\0\1\67\2\20\1\225\2\20\1\225\11\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\67\3\20\1\70\1\20\1\0\1\67\5\20"+
    "\1\202\11\20\1\67\4\20\1\67\1\0\3\20\1\67"+
    "\3\20\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\1\67\1\20\1\202\1\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\17\20\1\67\4\20\1\67"+
    "\1\0\3\20\1\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\3\20\1\67\2\20\1\67"+
    "\3\20\1\70\1\20\1\0\1\67\7\20\1\317\7\20"+
    "\1\67\4\20\1\67\1\0\3\20\1\67\1\20\1\175"+
    "\1\20\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\1\67\3\20\1\67\2\20\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\17\20\1\67\1\20\3\175\1\67\1\0"+
    "\3\20\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\17\20\1\67\1\20\2\175"+
    "\1\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\230\1\225\2\20\1\70\1\20\1\0\1\67"+
    "\17\20\1\67\4\20\1\67\1\0\3\20\1\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\1\225\2\20\1\67\2\20\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\17\20\1\67\4\20\1\67\1\0\1\225"+
    "\2\20\11\46\2\0\7\46\1\320\42\46\3\0\11\46"+
    "\2\0\10\46\1\321\41\46\3\0\11\46\2\0\16\46"+
    "\1\322\33\46\3\0\11\46\2\0\21\46\1\323\30\46"+
    "\2\0\1\324\34\0\1\324\32\0\1\324\22\0\1\325"+
    "\70\0\1\326\75\0\1\327\36\0\12\57\1\0\7\57"+
    "\1\330\42\57\3\0\12\57\1\0\10\57\1\331\41\57"+
    "\3\0\12\57\1\0\16\57\1\332\33\57\3\0\12\57"+
    "\1\0\21\57\1\333\30\57\2\0\1\334\34\0\1\334"+
    "\32\0\1\334\22\0\1\335\70\0\1\336\75\0\1\337"+
    "\36\0\4\67\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\15\67\1\0\12\67\1\340\13\67\1\0\4\67"+
    "\3\20\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\1\67\3\20\1\67\2\20\1\67\3\20\1\70\1\20"+
    "\1\0\1\67\11\20\1\341\5\20\1\67\4\20\1\67"+
    "\1\0\3\20\4\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\1\230\13\67\1\0\26\67\1\0"+
    "\1\230\2\67\41\0\1\342\60\0\1\235\60\0\1\232"+
    "\70\0\2\232\6\0\1\232\4\0\1\232\25\0\1\232"+
    "\27\0\2\232\63\0\2\232\13\0\1\232\70\0\1\343"+
    "\25\0\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\2\20\1\344\14\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\67\2\20\1\71\1\70\1\20\1\0\1\67"+
    "\17\20\1\67\4\20\1\67\1\0\3\20\4\67\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\4\67\2\230"+
    "\6\67\1\230\1\0\3\67\1\230\22\67\1\0\2\67"+
    "\1\230\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\230\1\225\1\20\1\67"+
    "\3\20\1\70\1\225\1\0\1\67\2\20\1\225\14\20"+
    "\1\67\4\20\1\67\1\0\2\20\1\225\1\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\67\2\20\1\67\3\20\1\70\1\20\1\0"+
    "\1\67\3\20\1\175\13\20\1\67\4\20\1\67\1\0"+
    "\3\20\31\0\1\345\36\0\4\67\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\15\67\1\0\10\67\1\346"+
    "\15\67\1\0\7\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\15\67\1\0\11\67\1\347\14\67\1\0"+
    "\7\67\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\15\67\1\0\6\67\1\350\17\67\1\0\4\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\67\2\20\1\67\3\20\1\70\1\20\1\0"+
    "\1\67\5\20\1\175\11\20\1\67\4\20\1\67\1\0"+
    "\3\20\22\0\1\351\111\0\1\352\1\302\63\0\1\353"+
    "\52\0\2\354\74\0\1\300\61\0\2\355\1\0\2\273"+
    "\103\0\1\356\73\0\1\357\72\0\1\351\36\0\1\360"+
    "\4\0\2\255\107\0\1\361\41\0\1\355\77\0\1\362"+
    "\106\0\1\363\44\0\1\351\37\0\1\351\32\0\1\364"+
    "\17\0\1\365\42\0\2\366\103\0\1\367\70\0\1\351"+
    "\57\0\1\370\101\0\1\352\23\0\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\67\1\20\1\225\1\20\1\70\1\20"+
    "\1\0\1\67\17\20\1\67\4\20\1\67\1\0\3\20"+
    "\4\67\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\12\67\1\230\2\67\1\0\6\67\1\230\17\67\1\0"+
    "\4\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\67\2\20\1\67\2\20\1\225"+
    "\1\70\1\20\1\0\1\67\5\20\1\225\11\20\1\67"+
    "\4\20\1\67\1\0\3\20\1\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\1\20\1\225"+
    "\1\20\1\67\2\20\1\67\3\20\1\70\1\20\1\0"+
    "\1\67\12\20\1\225\4\20\1\67\4\20\1\67\1\0"+
    "\3\20\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\10\20\1\371\2\20\1\225"+
    "\3\20\1\67\4\20\1\67\1\0\3\20\1\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\67\2\20\1\67\2\20\1\225\1\70\1\20"+
    "\1\0\1\67\17\20\1\67\4\20\1\67\1\0\3\20"+
    "\4\67\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\12\67\1\230\2\67\1\0\26\67\1\0\4\67\3\20"+
    "\1\0\3\67\4\0\1\67\1\0\1\67\1\0\1\67"+
    "\3\20\1\67\2\20\1\67\3\20\1\70\1\225\1\0"+
    "\1\67\17\20\1\67\4\20\1\67\1\0\2\20\1\225"+
    "\1\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\372\1\373\1\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\17\20\1\67\4\20\1\67"+
    "\1\0\3\20\4\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\14\67\1\230\1\0\26\67\1\0\2\67"+
    "\1\230\1\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\2\20\1\374\1\67\2\20\1\67"+
    "\3\20\1\70\1\20\1\0\1\67\17\20\1\67\4\20"+
    "\1\67\1\0\3\20\11\46\2\0\10\46\1\375\41\46"+
    "\3\0\11\46\2\0\20\46\1\376\31\46\3\0\11\46"+
    "\2\0\17\46\1\321\32\46\3\0\11\46\2\0\22\46"+
    "\1\377\27\46\40\0\1\u0100\55\0\1\u0101\77\0\1\u0102"+
    "\66\0\1\326\35\0\12\57\1\0\10\57\1\u0103\41\57"+
    "\3\0\12\57\1\0\20\57\1\u0104\31\57\3\0\12\57"+
    "\1\0\17\57\1\331\32\57\3\0\12\57\1\0\22\57"+
    "\1\u0105\27\57\40\0\1\u0106\55\0\1\u0107\77\0\1\u0108"+
    "\66\0\1\336\35\0\3\67\1\u0109\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\15\67\1\0\26\67\1\0"+
    "\4\67\2\20\1\u010a\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\17\20\1\67\4\20\1\67"+
    "\1\0\3\20\56\0\2\343\10\0\1\67\3\20\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\1\67\3\20"+
    "\1\67\2\20\1\67\3\20\1\70\1\20\1\0\1\67"+
    "\17\20\1\350\1\175\3\20\1\67\1\0\3\20\31\0"+
    "\1\232\36\0\4\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\3\67\1\230\11\67\1\0\26\67\1\0"+
    "\7\67\1\0\3\67\4\0\1\67\1\0\1\67\1\0"+
    "\11\67\1\u010b\3\67\1\0\26\67\1\0\3\67\32\0"+
    "\1\273\66\0\1\u010c\60\0\1\u010d\77\0\1\351\64\0"+
    "\2\273\15\0\1\u010e\72\0\1\u010f\50\0\1\u0110\102\0"+
    "\1\u0111\64\0\1\u0112\64\0\1\u0113\57\0\2\u0114\114\0"+
    "\1\301\36\0\2\u0115\112\0\1\u0116\67\0\1\u0117\17\0"+
    "\1\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\67\2\20\1\67\3\20\1\70"+
    "\1\20\1\0\1\67\17\20\1\230\1\225\3\20\1\67"+
    "\1\0\3\20\4\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\15\67\1\0\15\67\1\230\10\67\1\0"+
    "\4\67\3\20\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\1\67\3\20\1\67\2\20\1\67\3\20\1\70"+
    "\1\20\1\0\1\67\14\20\1\225\2\20\1\67\4\20"+
    "\1\67\1\0\3\20\1\67\3\20\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\1\67\3\20\1\67\2\20"+
    "\1\67\3\20\1\70\1\20\1\0\1\67\1\20\1\175"+
    "\2\20\2\175\7\20\1\175\1\20\1\67\4\20\1\67"+
    "\1\0\3\20\11\46\2\0\11\46\2\321\5\46\1\376"+
    "\31\46\3\0\10\46\1\u0118\2\0\52\46\3\0\1\46"+
    "\4\377\1\46\3\377\1\u0119\1\0\1\46\10\377\1\46"+
    "\2\377\1\46\6\377\1\46\17\377\1\46\4\377\2\46"+
    "\3\u0100\1\0\3\u0100\1\u0119\1\0\2\u0119\1\u0100\1\u0119"+
    "\2\0\4\u0119\4\u0100\1\0\2\u0100\1\0\3\u0100\1\u0119"+
    "\1\u0100\1\u0119\1\0\17\u0100\1\0\4\u0100\2\0\3\u0100"+
    "\24\0\2\326\5\0\1\u0102\44\0\1\u011a\57\0\12\57"+
    "\1\0\11\57\2\331\5\57\1\u0104\31\57\3\0\10\57"+
    "\1\u011b\1\57\1\0\52\57\3\0\1\57\4\u0105\1\57"+
    "\4\u0105\1\0\1\57\10\u0105\1\57\2\u0105\1\57\6\u0105"+
    "\1\57\17\u0105\1\57\4\u0105\2\57\3\u0106\1\0\3\u0106"+
    "\1\u011c\1\0\2\u011c\1\u0106\1\u011c\2\0\4\u011c\4\u0106"+
    "\1\0\2\u0106\1\0\3\u0106\1\u011c\1\u0106\1\u011c\1\0"+
    "\17\u0106\1\0\4\u0106\2\0\3\u0106\24\0\2\336\5\0"+
    "\1\u0108\44\0\1\u011d\57\0\4\67\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\7\67\2\u011e\4\67\1\0"+
    "\26\67\1\0\4\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\3\20\1\67\2\20\1\u011e"+
    "\1\u011f\2\20\1\70\1\20\1\0\1\67\17\20\1\67"+
    "\4\20\1\67\1\0\3\20\4\67\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\11\67\1\230\3\67\1\0"+
    "\26\67\1\0\3\67\53\0\1\u0120\62\0\1\u0121\70\0"+
    "\1\277\70\0\1\351\67\0\1\u0122\46\0\2\u0123\63\0"+
    "\2\u0124\111\0\1\u0125\44\0\2\255\111\0\1\u0126\71\0"+
    "\1\351\47\0\1\u0127\36\0\10\46\1\377\2\0\52\46"+
    "\13\0\1\u0100\57\0\10\57\1\u0105\1\57\1\0\52\57"+
    "\13\0\1\u0106\57\0\4\67\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\15\67\1\0\13\67\1\u0128\12\67"+
    "\1\0\4\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\12\20\1\u0129\4\20\1\67"+
    "\4\20\1\67\1\0\3\20\44\0\1\355\72\0\1\u012a"+
    "\65\0\1\351\67\0\1\300\51\0\2\u012b\70\0\1\351"+
    "\100\0\1\355\74\0\1\u012c\20\0\3\67\1\u012d\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\15\67\1\0"+
    "\26\67\1\0\4\67\2\20\1\u012e\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\1\67\3\20\1\67\2\20"+
    "\1\67\3\20\1\70\1\20\1\0\1\67\17\20\1\67"+
    "\4\20\1\67\1\0\3\20\41\0\1\351\71\0\1\355"+
    "\47\0\1\351\44\0\4\67\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\15\67\1\0\11\67\1\u012f\14\67"+
    "\1\0\4\67\3\20\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\1\67\3\20\1\67\2\20\1\67\3\20"+
    "\1\70\1\20\1\0\1\67\10\20\1\u0130\6\20\1\67"+
    "\4\20\1\67\1\0\3\20\4\67\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\15\67\1\0\6\67\1\u0131"+
    "\17\67\1\0\4\67\3\20\1\0\3\67\4\0\1\67"+
    "\1\0\1\67\1\0\1\67\3\20\1\67\2\20\1\67"+
    "\3\20\1\70\1\20\1\0\1\67\5\20\1\u0132\11\20"+
    "\1\67\4\20\1\67\1\0\3\20\4\67\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\15\67\1\0\6\67"+
    "\1\u0133\17\67\1\0\4\67\3\20\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\1\67\3\20\1\67\2\20"+
    "\1\67\3\20\1\70\1\20\1\0\1\67\5\20\1\u0134"+
    "\11\20\1\67\4\20\1\67\1\0\3\20\4\67\1\0"+
    "\3\67\4\0\1\67\1\0\1\67\1\0\15\67\1\0"+
    "\12\67\1\u0135\13\67\1\0\4\67\3\20\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\1\67\3\20\1\67"+
    "\2\20\1\67\3\20\1\70\1\20\1\0\1\67\11\20"+
    "\1\u0136\5\20\1\67\4\20\1\67\1\0\3\20";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15904];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\1\11\4\1\1\11\31\1\1\11"+
    "\7\1\1\11\13\1\4\11\5\1\6\0\11\1\2\0"+
    "\13\1\15\0\26\1\1\11\4\1\4\0\4\1\4\0"+
    "\5\1\1\11\3\0\3\1\1\0\6\1\1\0\4\1"+
    "\1\0\1\1\15\0\1\11\6\0\21\1\4\0\4\1"+
    "\4\0\2\1\1\0\1\11\1\1\1\0\3\1\1\11"+
    "\17\0\10\1\2\0\4\1\2\0\3\1\1\0\2\1"+
    "\3\0\1\1\5\0\1\1\2\0\1\1\2\0\2\1"+
    "\10\0\2\1\3\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[310];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


	/**
	 * Constructor.  We must have this here as JFLex does not generate a
	 * no parameter constructor.
	 */
	public AssemblerAvrTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}

	

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { ";", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *                    <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}
	


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AssemblerAvrTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
            	zzInput = zzBufferL[zzCurrentPosL++];
//              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 311: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 312: break;
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 313: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(Token.IDENTIFIER);
            }
          case 24: break;
          case 2: 
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
          case 25: break;
          case 3: 
            { addToken(Token.OPERATOR);
            }
          case 26: break;
          case 4: 
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
          case 27: break;
          case 5: 
            { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
            }
          case 28: break;
          case 6: 
            { addToken(Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
          case 29: break;
          case 7: 
            { addNullToken(); return firstToken;
            }
          case 30: break;
          case 8: 
            { addToken(Token.WHITESPACE);
            }
          case 31: break;
          case 9: 
            { addToken(Token.FUNCTION);
            }
          case 32: break;
          case 10: 
            { 
            }
          case 33: break;
          case 11: 
            { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
          case 34: break;
          case 12: 
            { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
          case 35: break;
          case 13: 
            { addToken(Token.PREPROCESSOR);
            }
          case 36: break;
          case 14: 
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          case 37: break;
          case 15: 
            { addToken(Token.LITERAL_CHAR);
            }
          case 38: break;
          case 16: 
            { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
            }
          case 39: break;
          case 17: 
            { start = zzMarkedPos-2; yybegin(MLC);
            }
          case 40: break;
          case 18: 
            { addToken(Token.RESERVED_WORD);
            }
          case 41: break;
          case 19: 
            { addToken(Token.VARIABLE);
            }
          case 42: break;
          case 20: 
            { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
            }
          case 43: break;
          case 21: 
            { addToken(Token.DATA_TYPE);
            }
          case 44: break;
          case 22: 
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
            }
          case 45: break;
          case 23: 
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}

/* The following code was generated by JFlex 1.4.1 on 1/29/16 10:50 PM */

/*
 * 11/24/2015
 *
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for TypeScript files.  Currently it is a clone of
 * {@code JavaScriptTokenMaker}, but it should diverge over time to match
 * the added features of TypeScript.
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>TypeScriptTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @version 0.9
 */

public class TypeScriptTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** lexical states */
  public static final int JS_STRING = 1;
  public static final int E4X = 6;
  public static final int E4X_INTAG = 10;
  public static final int E4X_PI = 8;
  public static final int JS_MLC = 3;
  public static final int JS_CHAR = 2;
  public static final int JS_EOL_COMMENT = 5;
  public static final int E4X_COMMENT = 7;
  public static final int JS_DOCCOMMENT = 4;
  public static final int E4X_DTD = 9;
  public static final int E4X_INATTR_SINGLE = 12;
  public static final int E4X_INATTR_DOUBLE = 11;
  public static final int YYINITIAL = 0;
  public static final int E4X_CDATA = 13;

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\74\1\2\1\0\1\1\1\11\22\0\1\74\1\36\1\76"+
    "\1\12\1\15\1\35\1\40\1\106\2\105\1\17\1\30\1\27\1\24"+
    "\1\25\1\16\1\5\7\7\2\4\1\41\1\75\1\31\1\32\1\34"+
    "\1\37\1\45\1\102\1\6\1\100\1\101\1\23\1\22\2\3\1\111"+
    "\2\3\1\21\1\3\1\110\5\3\1\103\3\3\1\20\2\3\1\77"+
    "\1\13\1\104\1\33\1\14\1\0\1\46\1\47\1\53\1\65\1\54"+
    "\1\70\1\57\1\61\1\56\1\3\1\64\1\55\1\44\1\60\1\62"+
    "\1\66\1\73\1\52\1\50\1\51\1\10\1\71\1\63\1\72\1\67"+
    "\1\107\1\112\1\43\1\26\1\42\uff81\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\2\1\1\0\1\2\1\3\1\4\1\5\2\6"+
    "\1\5\1\2\3\7\1\5\1\10\1\5\6\7\1\2"+
    "\1\5\1\2\20\5\1\11\1\12\2\5\1\1\1\13"+
    "\1\14\1\15\1\1\1\16\1\17\1\20\1\1\1\21"+
    "\5\1\1\22\10\1\1\23\3\1\2\5\1\24\1\25"+
    "\1\26\1\27\1\1\1\30\5\1\1\31\2\1\1\32"+
    "\1\1\1\33\1\34\1\35\2\36\1\37\1\40\1\41"+
    "\1\42\1\1\1\43\3\1\1\2\1\44\1\6\1\45"+
    "\1\44\1\45\1\44\1\46\1\44\1\5\2\0\1\47"+
    "\1\50\2\7\2\0\1\51\1\7\1\5\1\52\34\5"+
    "\2\53\7\5\1\53\13\5\1\54\1\55\1\56\1\57"+
    "\4\0\1\60\2\0\1\61\32\0\1\62\1\25\1\63"+
    "\1\64\1\26\5\0\1\65\2\0\1\2\1\45\1\0"+
    "\2\46\1\5\1\66\1\67\2\5\1\70\37\5\1\70"+
    "\26\5\64\0\1\71\2\0\1\72\5\0\1\73\1\2"+
    "\1\74\6\5\1\75\5\5\1\76\1\5\1\77\25\5"+
    "\1\0\1\1\1\0\1\100\15\0\1\101\45\0\1\102"+
    "\4\0\1\103\1\0\1\104\2\0\1\105\1\0\1\106"+
    "\1\2\5\5\1\53\17\5\1\53\1\5\15\0\1\101"+
    "\20\0\1\101\20\0\1\2\4\5\1\107\13\5\33\0"+
    "\10\5\1\101\4\0\1\101\12\0\3\5\6\0\1\5"+
    "\2\0\1\110\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\113\0\226\0\341\0\u012c\0\u0177\0\u01c2\0\u020d"+
    "\0\u0258\0\u02a3\0\u02ee\0\u0339\0\u0384\0\u03cf\0\u041a\0\u0465"+
    "\0\u04b0\0\u04fb\0\u0546\0\u0591\0\u05dc\0\u04b0\0\u0627\0\u0672"+
    "\0\u06bd\0\u0708\0\u04b0\0\u04b0\0\u0753\0\u079e\0\u07e9\0\u0834"+
    "\0\u04b0\0\u087f\0\u08ca\0\u0915\0\u0960\0\u09ab\0\u09f6\0\u0a41"+
    "\0\u0a8c\0\u0ad7\0\u0b22\0\u0b6d\0\u0bb8\0\u0c03\0\u0c4e\0\u0c99"+
    "\0\u0ce4\0\u0d2f\0\u0d7a\0\u0dc5\0\u0e10\0\u04b0\0\u04b0\0\u0e5b"+
    "\0\u0ea6\0\u0ef1\0\u04b0\0\u0f3c\0\u04b0\0\u0f87\0\u04b0\0\u0f3c"+
    "\0\u04b0\0\u0fd2\0\u04b0\0\u101d\0\u1068\0\u10b3\0\u10fe\0\u1149"+
    "\0\u04b0\0\u1194\0\u11df\0\u122a\0\u1275\0\u12c0\0\u130b\0\u1356"+
    "\0\u13a1\0\u04b0\0\u13ec\0\u1437\0\u1482\0\u14cd\0\u1518\0\u04b0"+
    "\0\u1563\0\u15ae\0\u04b0\0\u15f9\0\u04b0\0\u1644\0\u168f\0\u16da"+
    "\0\u1725\0\u1770\0\u04b0\0\u17bb\0\u1806\0\u04b0\0\u1851\0\u04b0"+
    "\0\u04b0\0\u04b0\0\u189c\0\u18e7\0\u1932\0\u04b0\0\u04b0\0\u04b0"+
    "\0\u197d\0\u04b0\0\u19c8\0\u1a13\0\u1a5e\0\u1aa9\0\u1af4\0\u1af4"+
    "\0\u1af4\0\u1b3f\0\u1b8a\0\u1bd5\0\u1c20\0\u1c6b\0\u1cb6\0\u1d01"+
    "\0\u1d4c\0\u04b0\0\u1d97\0\u1d01\0\u1de2\0\u0672\0\u1de2\0\u04b0"+
    "\0\u1e2d\0\u1e78\0\u1ec3\0\u1f0e\0\u1f59\0\u1fa4\0\u1fef\0\u203a"+
    "\0\u2085\0\u20d0\0\u211b\0\u2166\0\u21b1\0\u21fc\0\u2247\0\u2292"+
    "\0\u22dd\0\u2328\0\u2373\0\u23be\0\u2409\0\u2454\0\u249f\0\u24ea"+
    "\0\u2535\0\u2580\0\u25cb\0\u2616\0\u2661\0\u26ac\0\u26f7\0\u2742"+
    "\0\u04fb\0\u278d\0\u27d8\0\u2823\0\u286e\0\u28b9\0\u2904\0\u294f"+
    "\0\u299a\0\u29e5\0\u2a30\0\u2a7b\0\u2ac6\0\u2b11\0\u2b5c\0\u2ba7"+
    "\0\u2bf2\0\u2c3d\0\u2c88\0\u2cd3\0\u04b0\0\u2d1e\0\u2d69\0\u04b0"+
    "\0\u2db4\0\u2dff\0\u2e4a\0\u2e95\0\u04b0\0\u2ee0\0\u2f2b\0\u04b0"+
    "\0\u2f76\0\u2fc1\0\u300c\0\u3057\0\u30a2\0\u30ed\0\u3138\0\u3183"+
    "\0\u31ce\0\u3219\0\u3264\0\u32af\0\u32fa\0\u3345\0\u3390\0\u33db"+
    "\0\u3426\0\u3471\0\u34bc\0\u3507\0\u3552\0\u359d\0\u35e8\0\u3633"+
    "\0\u367e\0\u36c9\0\u3714\0\u375f\0\u37aa\0\u04b0\0\u04b0\0\u37f5"+
    "\0\u3840\0\u388b\0\u38d6\0\u3921\0\u04b0\0\u396c\0\u39b7\0\u3a02"+
    "\0\u3a4d\0\u3a98\0\u1af4\0\u3ae3\0\u3b2e\0\u3b79\0\u3bc4\0\u3c0f"+
    "\0\u3c5a\0\u04fb\0\u3ca5\0\u3cf0\0\u3d3b\0\u3d86\0\u3dd1\0\u3e1c"+
    "\0\u3e67\0\u3eb2\0\u3efd\0\u3f48\0\u3f93\0\u3fde\0\u4029\0\u4074"+
    "\0\u40bf\0\u410a\0\u4155\0\u41a0\0\u41eb\0\u4236\0\u4281\0\u42cc"+
    "\0\u4317\0\u4362\0\u43ad\0\u43f8\0\u4443\0\u448e\0\u44d9\0\u4524"+
    "\0\u456f\0\u45ba\0\u4605\0\u4650\0\u469b\0\u46e6\0\u4731\0\u477c"+
    "\0\u47c7\0\u4812\0\u485d\0\u48a8\0\u48f3\0\u493e\0\u4989\0\u49d4"+
    "\0\u4a1f\0\u4a6a\0\u4ab5\0\u4b00\0\u4b4b\0\u4b96\0\u4be1\0\u4c2c"+
    "\0\u4c77\0\u4cc2\0\u4d0d\0\u4d58\0\u4da3\0\u4dee\0\u4e39\0\u4e84"+
    "\0\u4ecf\0\u4f1a\0\u4f65\0\u4fb0\0\u4ffb\0\u5046\0\u5091\0\u50dc"+
    "\0\u5127\0\u5172\0\u51bd\0\u5208\0\u5253\0\u529e\0\u52e9\0\u5334"+
    "\0\u537f\0\u53ca\0\u5415\0\u5460\0\u54ab\0\u54f6\0\u5541\0\u558c"+
    "\0\u55d7\0\u5622\0\u566d\0\u56b8\0\u5703\0\u574e\0\u5799\0\u57e4"+
    "\0\u582f\0\u587a\0\u58c5\0\u5910\0\u595b\0\u59a6\0\u59f1\0\u5a3c"+
    "\0\u5a87\0\u5ad2\0\u5b1d\0\u5b68\0\u5bb3\0\u5bfe\0\u5c49\0\u04b0"+
    "\0\u5c94\0\u5cdf\0\u5d2a\0\u5d75\0\u5dc0\0\u04b0\0\u5e0b\0\u04b0"+
    "\0\u5e56\0\u5ea1\0\u5eec\0\u5f37\0\u5f82\0\u5fcd\0\u04fb\0\u6018"+
    "\0\u6063\0\u60ae\0\u60f9\0\u6144\0\u04fb\0\u618f\0\u04fb\0\u61da"+
    "\0\u6225\0\u6270\0\u62bb\0\u6306\0\u6351\0\u639c\0\u63e7\0\u6432"+
    "\0\u647d\0\u64c8\0\u6513\0\u655e\0\u65a9\0\u65f4\0\u663f\0\u668a"+
    "\0\u66d5\0\u6720\0\u676b\0\u67b6\0\u2d69\0\u04b0\0\u6801\0\u684c"+
    "\0\u6897\0\u68e2\0\u692d\0\u6978\0\u69c3\0\u6a0e\0\u6a59\0\u6aa4"+
    "\0\u6aef\0\u6b3a\0\u6b85\0\u6bd0\0\u6c1b\0\u04b0\0\u6c66\0\u6cb1"+
    "\0\u6cfc\0\u6d47\0\u6d92\0\u6ddd\0\u6e28\0\u6e73\0\u6ebe\0\u6f09"+
    "\0\u6f54\0\u6f9f\0\u6fea\0\u7035\0\u7080\0\u70cb\0\u7116\0\u7161"+
    "\0\u71ac\0\u71f7\0\u7242\0\u728d\0\u72d8\0\u7323\0\u736e\0\u73b9"+
    "\0\u7404\0\u744f\0\u749a\0\u74e5\0\u7530\0\u757b\0\u75c6\0\u7611"+
    "\0\u765c\0\u76a7\0\u76f2\0\u773d\0\u7788\0\u77d3\0\u781e\0\u7869"+
    "\0\u78b4\0\u78ff\0\u04b0\0\u794a\0\u7995\0\u79e0\0\u7a2b\0\u04b0"+
    "\0\u7a76\0\u7ac1\0\u7b0c\0\u7b57\0\u7ba2\0\u7bed\0\u4029\0\u7c38"+
    "\0\u7c83\0\u7cce\0\u7d19\0\u7d64\0\u7daf\0\u7dfa\0\u7e45\0\u7e90"+
    "\0\u7edb\0\u7f26\0\u7f71\0\u7fbc\0\u8007\0\u8052\0\u809d\0\u80e8"+
    "\0\u684c\0\u8133\0\u817e\0\u81c9\0\u8214\0\u825f\0\u82aa\0\u82f5"+
    "\0\u8340\0\u838b\0\u83d6\0\u8421\0\u846c\0\u84b7\0\u8502\0\u854d"+
    "\0\u8598\0\u85e3\0\u862e\0\u8679\0\u86c4\0\u870f\0\u875a\0\u87a5"+
    "\0\u87f0\0\u883b\0\u8886\0\u88d1\0\u891c\0\u8967\0\u89b2\0\u89fd"+
    "\0\u8a48\0\u8a93\0\u8ade\0\u8b29\0\u8b74\0\u8bbf\0\u773d\0\u8c0a"+
    "\0\u8c55\0\u8ca0\0\u78b4\0\u8ceb\0\u8d36\0\u79e0\0\u8d81\0\u8dcc"+
    "\0\u8e17\0\u8e62\0\u8ead\0\u8ef8\0\u04fb\0\u8f43\0\u8f8e\0\u8fd9"+
    "\0\u9024\0\u906f\0\u90ba\0\u9105\0\u9150\0\u919b\0\u91e6\0\u9231"+
    "\0\u927c\0\u92c7\0\u9312\0\u935d\0\u93a8\0\u93f3\0\u943e\0\u9489"+
    "\0\u94d4\0\u951f\0\u956a\0\u95b5\0\u9600\0\u964b\0\u9696\0\u96e1"+
    "\0\u972c\0\u9777\0\u97c2\0\u980d\0\u9858\0\u98a3\0\u98ee\0\u9939"+
    "\0\u9984\0\u99cf\0\u9a1a\0\u9a65\0\u9ab0\0\u9afb\0\u9b46\0\u9b91"+
    "\0\u9bdc\0\u9c27\0\u9c72\0\u9cbd\0\u9d08\0\u9d53\0\u9d9e\0\u9de9"+
    "\0\u6cfc\0\u9e34\0\u9e7f\0\u9eca\0\u9f15\0\u9f60\0\u9fab\0\u9ff6"+
    "\0\ua041\0\ua08c\0\ua0d7\0\ua122\0\ua16d\0\ua1b8\0\ua203\0\ua24e"+
    "\0\ua299\0\ua2e4\0\ua32f\0\ua37a\0\ua3c5\0\ua410\0\ua45b\0\u04b0"+
    "\0\ua4a6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\22\1\23"+
    "\1\25\1\26\2\17\2\22\1\27\1\30\4\22\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\30\1\40"+
    "\2\30\1\41\1\42\2\41\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\2\22\1\61\1\22\1\62\1\63\1\22"+
    "\1\64\1\65\2\22\1\20\1\34\1\66\1\33\4\22"+
    "\2\33\1\67\1\22\1\70\1\71\1\33\2\72\1\73"+
    "\10\72\1\74\62\72\1\75\14\72\2\76\1\77\10\76"+
    "\1\100\72\76\1\101\4\76\2\102\1\103\14\102\1\104"+
    "\41\102\1\105\1\102\1\106\4\102\1\107\22\102\2\110"+
    "\1\111\14\110\1\112\11\110\1\113\13\110\1\114\13\110"+
    "\1\115\1\110\1\116\4\110\1\117\21\110\1\120\2\121"+
    "\1\122\56\121\1\123\1\121\1\124\4\121\1\125\22\121"+
    "\1\126\1\127\1\130\26\126\1\131\6\126\1\132\33\126"+
    "\1\20\1\133\15\126\2\134\1\135\21\134\1\136\34\134"+
    "\1\137\1\134\1\140\4\134\1\141\22\134\2\142\1\143"+
    "\34\142\1\144\53\142\2\145\1\146\26\145\1\147\2\145"+
    "\1\150\42\145\1\151\4\145\1\152\6\145\1\153\1\154"+
    "\1\0\13\153\1\155\13\153\1\41\1\153\1\156\37\153"+
    "\1\20\1\153\1\157\7\153\1\160\4\153\76\161\1\162"+
    "\14\161\106\163\1\162\4\163\104\164\1\165\6\164\1\17"+
    "\2\0\6\17\1\0\4\17\2\0\4\17\20\0\30\17"+
    "\4\0\4\17\3\0\3\17\2\0\1\20\72\0\1\20"+
    "\131\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\26\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\167\2\0\1\167\2\23\1\167"+
    "\1\23\1\167\1\0\4\167\2\0\1\167\1\170\1\171"+
    "\1\172\1\0\1\173\16\0\10\167\1\172\1\170\7\167"+
    "\1\171\2\167\1\171\3\167\4\0\1\167\1\171\2\167"+
    "\3\0\3\167\1\0\1\167\2\0\1\167\1\174\1\175"+
    "\1\167\1\175\1\167\1\0\4\167\2\0\1\176\1\170"+
    "\1\171\1\172\1\0\1\173\16\0\10\167\1\172\1\170"+
    "\7\167\1\171\2\167\1\171\1\167\1\176\1\167\4\0"+
    "\1\167\1\171\2\167\3\0\3\167\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\12\22\1\177\13\22\4\0\4\22\3\0"+
    "\3\22\1\0\13\200\1\201\2\200\1\202\1\203\12\200"+
    "\1\204\60\200\32\0\1\41\104\0\1\41\5\0\1\41"+
    "\64\0\2\173\1\0\1\173\133\0\1\41\1\0\1\205"+
    "\111\0\1\206\1\41\61\0\1\207\27\0\1\210\1\41"+
    "\41\0\1\207\50\0\1\41\1\0\1\211\110\0\1\41"+
    "\5\0\1\41\104\0\1\41\10\0\1\41\47\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\14\22\1\212\11\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\1\213\2\17\1\213"+
    "\1\17\1\213\1\0\4\17\2\0\4\213\20\0\1\213"+
    "\1\17\26\213\4\0\4\213\3\0\3\213\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\1\22\1\214\10\22\1\215\13\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\4\22\1\216\7\22\1\217\4\22\1\220\4\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\5\22"+
    "\1\221\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\3\22\1\222\7\22\1\223\1\22\1\224"+
    "\3\22\1\225\4\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\4\22\1\226\6\22\1\227"+
    "\5\22\1\230\4\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\6\22\1\231\17\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\1\232\6\22\1\233\3\22\1\234\1\235\11\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\1\236\1\22\1\237\4\22\1\240\2\22\1\241\10\22"+
    "\1\242\1\243\1\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\6\22\1\244\5\22\1\245"+
    "\11\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\246\1\17\2\22\1\247\7\22\1\250\7\22\1\251"+
    "\3\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\14\22\1\252\11\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\5\22\1\253\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\1\254"+
    "\5\22\1\255\17\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\10\22\1\256\2\22\1\257"+
    "\12\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\6\22\1\260\5\22\1\261\11\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\5\22\1\262"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\1\263\3\22\1\264\21\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\5\22\1\265\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\1\266"+
    "\6\22\1\267\1\270\3\22\1\271\11\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\1\271"+
    "\13\22\1\272\11\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\1\273\25\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\12\22"+
    "\1\274\13\22\4\0\4\22\3\0\3\22\1\0\2\72"+
    "\1\0\10\72\1\0\62\72\1\0\14\72\2\275\1\0"+
    "\5\275\1\276\61\275\1\277\20\275\2\76\1\0\10\76"+
    "\1\0\72\76\1\0\4\76\2\102\1\0\14\102\1\0"+
    "\41\102\1\0\1\102\1\0\4\102\1\0\22\102\16\0"+
    "\1\300\145\0\1\301\124\0\1\302\100\0\1\303\4\0"+
    "\1\304\34\0\2\110\1\0\14\110\1\0\11\110\1\0"+
    "\13\110\1\0\13\110\1\0\1\110\1\0\4\110\1\0"+
    "\21\110\17\0\1\305\77\0\1\306\2\0\1\306\1\0"+
    "\1\306\5\0\1\307\1\0\4\306\10\0\1\310\7\0"+
    "\1\306\1\0\26\306\4\0\4\306\3\0\3\306\45\0"+
    "\1\311\1\0\1\312\1\313\1\314\1\315\1\316\1\317"+
    "\1\320\1\321\1\322\1\323\1\324\3\0\1\325\1\326"+
    "\1\327\1\0\1\330\1\331\72\0\1\332\124\0\1\333"+
    "\100\0\1\334\4\0\1\335\101\0\1\336\45\0\2\121"+
    "\1\0\56\121\1\0\1\121\1\0\4\121\1\0\22\121"+
    "\51\0\1\337\124\0\1\340\100\0\1\341\4\0\1\342"+
    "\34\0\2\126\1\0\26\126\1\0\6\126\1\0\33\126"+
    "\2\0\16\126\1\127\1\0\26\126\1\0\6\126\1\0"+
    "\33\126\1\20\1\0\15\126\3\0\1\343\2\0\1\343"+
    "\1\0\1\343\3\0\1\343\1\0\1\344\1\0\4\343"+
    "\12\0\1\345\1\346\1\0\1\343\2\0\1\343\1\0"+
    "\26\343\4\0\4\343\3\0\3\343\1\0\74\132\1\0"+
    "\1\347\15\132\2\134\1\0\21\134\1\0\34\134\1\0"+
    "\1\134\1\0\4\134\1\0\22\134\24\0\1\350\137\0"+
    "\1\351\124\0\1\352\100\0\1\353\4\0\1\354\34\0"+
    "\2\142\1\0\34\142\1\0\53\142\34\0\1\355\56\0"+
    "\2\145\1\0\26\145\1\0\2\145\1\0\42\145\1\0"+
    "\4\145\1\0\6\145\36\0\1\356\54\0\2\153\1\0"+
    "\13\153\1\0\13\153\1\0\1\153\1\0\37\153\1\0"+
    "\1\153\1\0\7\153\1\0\5\153\1\154\1\0\13\153"+
    "\1\0\13\153\1\0\1\153\1\0\37\153\1\20\1\153"+
    "\1\0\7\153\1\0\4\153\34\0\1\156\56\0\76\161"+
    "\1\0\14\161\106\163\1\0\4\163\104\164\1\0\6\164"+
    "\104\0\1\357\6\0\1\17\2\0\5\17\1\360\1\0"+
    "\4\17\2\0\4\17\20\0\30\17\4\0\4\17\3\0"+
    "\3\17\1\0\1\167\2\0\6\167\1\0\4\167\2\0"+
    "\4\167\20\0\30\167\4\0\4\167\3\0\3\167\1\0"+
    "\1\167\2\0\1\167\2\361\1\167\1\361\1\167\1\0"+
    "\4\167\2\0\4\167\1\362\3\0\1\362\13\0\30\167"+
    "\4\0\4\167\3\0\3\167\1\0\1\167\2\0\1\167"+
    "\2\173\1\167\1\173\1\167\1\0\4\167\2\0\2\167"+
    "\1\171\1\172\20\0\10\167\1\172\10\167\1\171\2\167"+
    "\1\171\3\167\4\0\1\167\1\171\2\167\3\0\3\167"+
    "\1\0\1\167\2\0\1\167\2\174\1\167\1\174\1\167"+
    "\1\0\4\167\2\0\2\167\1\171\1\172\1\0\1\173"+
    "\16\0\10\167\1\172\10\167\1\171\2\167\1\171\3\167"+
    "\4\0\1\167\1\171\2\167\3\0\3\167\1\0\1\167"+
    "\2\0\1\167\1\174\1\175\1\167\1\175\1\167\1\0"+
    "\4\167\2\0\1\167\1\363\1\171\1\172\1\0\1\173"+
    "\16\0\10\167\1\172\1\363\7\167\1\171\2\167\1\171"+
    "\3\167\4\0\1\167\1\171\2\167\3\0\3\167\1\0"+
    "\1\167\2\0\1\167\4\364\1\167\1\0\4\167\2\0"+
    "\2\167\2\364\20\0\2\167\2\364\3\167\2\364\10\167"+
    "\1\364\2\167\1\364\3\167\4\0\3\364\1\167\3\0"+
    "\3\167\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\6\22\1\365"+
    "\17\22\4\0\4\22\3\0\3\22\1\0\13\200\1\201"+
    "\2\200\1\366\76\200\1\0\110\200\17\0\1\367\74\0"+
    "\1\207\27\0\1\210\42\0\1\207\50\0\1\41\1\0"+
    "\1\30\56\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\17\22\1\370"+
    "\6\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\213\1\0\4\17\2\0\4\213\20\0\1\213\1\17"+
    "\26\213\4\0\4\213\3\0\3\213\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\2\22\1\371\23\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\21\22\1\372"+
    "\4\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\6\22\1\373\17\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\14\22\1\374"+
    "\11\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\3\22\1\375\22\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\20\22\1\376"+
    "\5\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\1\377\3\22\1\u0100\21\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\14\22"+
    "\1\u0101\11\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\10\22\1\u0102\15\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\12\22"+
    "\1\u0103\13\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\5\22\1\u0104\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\1\u0105\20\22\1\251\4\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\4\22\1\u0106\3\22\1\u0107\15\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\20\22"+
    "\1\u0108\5\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\3\22\1\u0109\22\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\2\22"+
    "\1\u010a\1\u010b\22\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\1\u010c\25\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\1\u010d"+
    "\25\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\12\22\1\u010e\13\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\5\22\1\u010f"+
    "\20\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\5\22\1\u0110\20\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\2\22\1\u010a"+
    "\23\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\5\22\1\u0111\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\26\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\1\u0112\25\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\3\22\1\u0113\14\22\1\u0114\5\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\3\22\1\251"+
    "\22\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\12\22\1\u0115\13\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\20\22\1\u0116"+
    "\5\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\2\22\1\u0117"+
    "\1\22\20\0\1\22\1\17\26\22\4\0\4\22\3\0"+
    "\1\22\1\u0118\1\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\2\22\1\u0119\1\u011a\22\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\3\22\1\u011b\22\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\u011c"+
    "\1\17\7\22\1\u011d\16\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\3\22\1\u011e\22\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\15\22\1\251\10\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\3\22\1\u011f\22\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\10\22\1\u0120\15\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\1\22\1\u0121\5\22"+
    "\1\u0122\12\22\1\u0123\3\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\5\22\1\u0124\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\26\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\1\22\1\u0125\24\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\4\22\1\u0126\1\u0127\20\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\10\22\1\u0128\3\22\1\u0129\11\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\12\22"+
    "\1\u012a\13\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\7\22\1\u012b\16\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\14\22"+
    "\1\u012c\11\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\12\22\1\u012d\13\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\4\22"+
    "\1\251\21\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\7\22\1\u012e\1\u012f\15\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\26\22\4\0\4\22\3\0\1\22\1\251\1\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\22\22\1\u0130\3\22\4\0"+
    "\4\22\3\0\3\22\5\0\4\u0131\12\0\2\u0131\22\0"+
    "\2\u0131\3\0\2\u0131\10\0\1\u0131\2\0\1\u0131\7\0"+
    "\3\u0131\14\0\4\u0132\12\0\2\u0132\22\0\2\u0132\3\0"+
    "\2\u0132\10\0\1\u0132\2\0\1\u0132\7\0\3\u0132\61\0"+
    "\1\u0133\124\0\1\u0134\115\0\1\u0135\101\0\1\u0136\35\0"+
    "\34\306\1\310\56\306\3\0\1\306\2\0\1\306\1\0"+
    "\1\306\7\0\4\306\10\0\1\310\7\0\1\306\1\0"+
    "\26\306\4\0\4\306\3\0\3\306\55\0\1\u0137\1\0"+
    "\1\u0138\3\0\1\u0139\40\0\1\u013a\36\0\1\u013b\3\0"+
    "\1\u013c\1\0\1\u013d\117\0\1\u013e\40\0\1\u013f\40\0"+
    "\1\u0140\2\0\1\u0141\1\0\1\u0142\115\0\1\u0143\1\u0144"+
    "\4\0\1\u0145\77\0\1\u0146\104\0\1\u0147\6\0\1\u0148"+
    "\4\0\1\u0149\110\0\1\u014a\10\0\1\u014b\1\u014c\74\0"+
    "\1\u014d\1\0\1\u014e\113\0\1\u014f\1\u0150\107\0\1\u0151"+
    "\103\0\1\u0152\122\0\1\u0153\110\0\1\u0154\46\0\1\u0155"+
    "\35\0\1\u0156\3\0\1\u0157\116\0\1\u0158\102\0\1\u0159"+
    "\5\0\1\u015a\107\0\1\u015b\124\0\1\u015c\115\0\1\u015d"+
    "\101\0\1\u015e\106\0\1\u015f\3\0\1\u0160\106\0\1\u0161"+
    "\124\0\1\u0162\115\0\1\u0163\101\0\1\u0164\40\0\6\343"+
    "\3\0\1\343\3\0\6\343\13\0\1\343\2\0\1\343"+
    "\1\0\26\343\4\0\4\343\3\0\3\343\4\0\1\u0165"+
    "\2\0\1\u0165\1\0\1\u0165\3\0\1\u0165\3\0\4\u0165"+
    "\15\0\1\u0165\2\0\1\u0165\1\0\26\u0165\4\0\4\u0165"+
    "\3\0\3\u0165\25\0\1\u0166\52\0\1\u0167\47\0\1\u0168"+
    "\127\0\1\u0169\124\0\1\u016a\115\0\1\u016b\101\0\1\u016c"+
    "\61\0\1\u016d\122\0\1\u016e\56\0\1\17\2\0\1\17"+
    "\4\u016f\1\17\1\0\4\17\2\0\2\17\2\u016f\20\0"+
    "\2\17\2\u016f\3\17\2\u016f\10\17\1\u016f\2\17\1\u016f"+
    "\3\17\4\0\3\u016f\1\17\3\0\3\17\1\0\1\167"+
    "\2\0\1\167\2\361\1\167\1\361\1\167\1\0\4\167"+
    "\2\0\2\167\1\171\1\167\20\0\21\167\1\171\2\167"+
    "\1\171\3\167\4\0\1\167\1\171\2\167\3\0\3\167"+
    "\5\0\2\361\1\0\1\361\103\0\1\167\2\0\1\167"+
    "\4\364\1\167\1\0\4\167\2\0\1\167\1\363\2\364"+
    "\20\0\2\167\2\364\3\167\2\364\1\363\7\167\1\364"+
    "\2\167\1\364\3\167\4\0\3\364\1\167\3\0\3\167"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\2\22\1\237\23\22"+
    "\4\0\4\22\3\0\3\22\45\0\1\366\11\0\2\366"+
    "\51\0\1\u0170\74\0\1\17\2\0\5\22\1\u0120\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\26\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\3\22\1\u0171\22\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\1\u0172\25\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\7\22\1\u0173\16\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\6\22\1\372\17\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\6\22\1\271\17\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\3\22\1\u0174\22\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\10\22\1\245\15\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\4\22\1\u0175\21\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\3\22\1\u010b\22\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\5\22\1\u0176\20\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\6\22\1\u0177\17\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\12\22\1\u0178\13\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\14\22\1\u0179\11\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\2\22\1\251\23\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\6\22\1\u017a\17\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\5\22\1\u017b\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\26\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\6\22\1\251\17\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\5\22\1\u011f\20\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\2\22\1\u0107\23\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\4\22\1\372\21\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\2\22\1\244\1\u017c\22\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\13\22\1\u017d\12\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\1\u017e\25\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\251\1\17\26\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\7\22\1\u017f"+
    "\16\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\6\22\1\u0180\17\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\14\22\1\u0181"+
    "\11\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\11\22\1\372\14\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\7\22\1\u0182"+
    "\4\22\1\u0181\11\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\10\22\1\u0183\15\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\1\u0184\25\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\3\22\1\u0185\22\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\6\22"+
    "\1\u0186\17\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\14\22\1\251\11\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\1\22"+
    "\1\u0187\24\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\7\22\1\251\16\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\10\22"+
    "\1\u0188\15\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\13\22\1\251\12\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\7\22"+
    "\1\u010a\16\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\5\22\1\u0189\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\26\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\6\22\1\u018a"+
    "\17\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\1\u018b\25\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\1\22\1\u018c\24\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\7\22\1\u0174\16\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\2\22\1\u018d\23\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\16\22\1\u018e\7\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\23\22\1\u018f\2\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\3\22\1\u0190\22\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\5\22\1\u0191\20\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\2\22\1\u0104\23\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\1\u0175\25\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\1\u0192\25\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\1\u0193\25\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\17\22\1\251"+
    "\6\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\10\22\1\u0194\15\22\4\0\4\22\3\0"+
    "\3\22\5\0\4\u0195\12\0\2\u0195\22\0\2\u0195\3\0"+
    "\2\u0195\10\0\1\u0195\2\0\1\u0195\7\0\3\u0195\14\0"+
    "\4\u0196\12\0\2\u0196\22\0\2\u0196\3\0\2\u0196\10\0"+
    "\1\u0196\2\0\1\u0196\7\0\3\u0196\76\0\1\u0197\51\0"+
    "\1\u0198\126\0\1\u0199\125\0\1\u0135\102\0\1\u019a\4\0"+
    "\1\u019b\133\0\1\u019c\105\0\1\u019d\76\0\1\u019e\5\0"+
    "\1\u019f\103\0\1\u01a0\115\0\1\u01a1\115\0\1\u01a2\106\0"+
    "\1\u01a3\104\0\1\u01a4\114\0\1\u01a5\120\0\1\u01a6\116\0"+
    "\1\u01a7\104\0\1\u01a8\3\0\1\u01a9\121\0\1\u01aa\113\0"+
    "\1\u01ab\72\0\1\u01ac\2\0\1\u01ad\21\0\1\u01ae\74\0"+
    "\1\u01af\103\0\1\u01b0\124\0\1\u01b1\5\0\1\u01b2\34\0"+
    "\1\u01b3\156\0\1\u01b4\104\0\1\u01b5\2\0\1\u01b6\14\0"+
    "\1\u01b7\104\0\1\u01b8\105\0\1\u01b9\4\0\1\u01ba\112\0"+
    "\1\u01bb\102\0\1\u01bc\7\0\1\u01bd\114\0\1\u01be\74\0"+
    "\1\u01bf\126\0\1\u01c0\102\0\1\u01c1\15\0\1\u01c2\1\0"+
    "\1\u01c3\71\0\1\u01c4\115\0\1\u01c5\116\0\1\u01c6\3\0"+
    "\1\u01c7\102\0\1\u01c8\2\0\1\u0141\107\0\1\u01c9\112\0"+
    "\1\u01ca\126\0\1\u01cb\51\0\1\u01cc\126\0\1\u01cd\125\0"+
    "\1\u015d\46\0\1\u01ce\160\0\1\u01cf\122\0\1\u01d0\51\0"+
    "\1\u01d1\126\0\1\u01d2\125\0\1\u0163\41\0\6\u0165\3\0"+
    "\1\u0165\3\0\6\u0165\13\0\1\u0165\2\0\1\u0165\1\0"+
    "\26\u0165\4\0\4\u0165\3\0\3\u0165\25\0\1\u01d3\166\0"+
    "\1\u01d4\100\0\1\u01d5\51\0\1\u01d6\126\0\1\u01d7\125\0"+
    "\1\u016b\62\0\1\u01d8\66\0\1\17\2\0\1\17\4\u01d9"+
    "\1\17\1\0\4\17\2\0\2\17\2\u01d9\20\0\2\17"+
    "\2\u01d9\3\17\2\u01d9\10\17\1\u01d9\2\17\1\u01d9\3\17"+
    "\4\0\3\u01d9\1\17\3\0\3\17\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\4\22\1\u01da\21\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\16\22\1\251"+
    "\7\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\6\22\1\u01db\17\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\10\22\1\u01dc"+
    "\15\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\3\22\1\372\22\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\13\22\1\u01dd"+
    "\12\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\2\22\1\u01de\23\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\15\22\1\u01df"+
    "\10\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\14\22\1\u01e0\11\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\4\22\1\u01e1"+
    "\21\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\10\22\1\u01e2\15\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\20\22\1\u01e3"+
    "\5\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\12\22\1\u01e4\13\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\4\22\1\244"+
    "\21\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\6\22\1\u01e5\17\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\12\22\1\u01e6"+
    "\13\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\26\22\4\0\4\22\3\0\1\22\1\u017f"+
    "\1\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\1\u01e7\25\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\4\22\1\u01e8\21\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\6\22\1\u010d\17\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\23\22\1\u010a\2\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\11\22\1\u01e9\14\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\3\22\1\u010a\22\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\5\22\1\u01ea\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\26\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\7\22\1\375\16\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\6\22\1\u01eb\17\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\1\u01ec\25\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\1\u018a\25\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\6\22\1\u01ed"+
    "\17\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\3\22\1\u01ee\22\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\7\22\1\u01ef"+
    "\16\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\3\22\1\257\22\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\12\22\1\u01f0"+
    "\13\22\4\0\4\22\3\0\3\22\42\0\1\u0199\6\0"+
    "\1\u0135\45\0\6\u0198\1\0\1\u01f1\1\0\1\u01f1\2\u0198"+
    "\1\u01f1\4\u0198\2\u01f1\1\0\2\u01f1\1\0\1\u01f1\2\0"+
    "\6\u01f1\1\0\1\u0198\1\u01f1\26\u0198\1\0\1\u01f1\1\0"+
    "\1\u01f1\4\u0198\3\u01f1\3\u0198\17\0\1\u01f2\143\0\1\u01f3"+
    "\124\0\1\u01f4\105\0\1\u01a9\1\0\1\u01f5\44\0\1\u01f6"+
    "\163\0\1\u01f7\75\0\1\u01f8\117\0\1\u01f9\115\0\1\u01fa"+
    "\104\0\1\u01a9\116\0\1\u01a8\104\0\1\u01fb\117\0\1\u01fc"+
    "\114\0\1\u0141\121\0\1\u01fd\100\0\1\u01a6\124\0\1\u01a6"+
    "\104\0\1\u01fe\123\0\1\u01ff\35\0\1\u0200\112\0\1\u0201"+
    "\157\0\1\u0202\105\0\1\u0203\112\0\1\u0204\131\0\1\u0205"+
    "\67\0\1\u01a6\126\0\1\u0206\76\0\1\u0207\122\0\1\u0208"+
    "\120\0\1\u0209\115\0\1\u01a9\101\0\1\u020a\122\0\1\u01a6"+
    "\110\0\1\u020b\101\0\1\u020c\115\0\1\u020d\105\0\1\u020e"+
    "\117\0\1\u020f\123\0\1\u01a6\100\0\1\u01a6\111\0\1\u0210"+
    "\106\0\1\u0211\121\0\1\u01fc\103\0\1\u01b3\135\0\1\u0212"+
    "\72\0\1\u0213\14\0\1\u0214\100\0\1\u01a9\114\0\1\u0215"+
    "\104\0\1\u0216\103\0\1\u01cd\6\0\1\u015d\45\0\6\u01cc"+
    "\1\0\1\u0217\1\0\1\u0217\2\u01cc\1\u0217\4\u01cc\2\u0217"+
    "\1\0\2\u0217\1\0\1\u0217\2\0\6\u0217\1\0\1\u01cc"+
    "\1\u0217\26\u01cc\1\0\1\u0217\1\0\1\u0217\4\u01cc\3\u0217"+
    "\3\u01cc\17\0\1\u0218\145\0\1\u0219\121\0\1\u021a\73\0"+
    "\1\u01d2\6\0\1\u0163\45\0\6\u01d1\1\0\1\u021b\1\0"+
    "\1\u021b\2\u01d1\1\u021b\4\u01d1\2\u021b\1\0\2\u021b\1\0"+
    "\1\u021b\2\0\6\u021b\1\0\1\u01d1\1\u021b\26\u01d1\1\0"+
    "\1\u021b\1\0\1\u021b\4\u01d1\3\u021b\3\u01d1\17\0\1\u021c"+
    "\175\0\1\u021d\52\0\1\u01d7\6\0\1\u016b\45\0\6\u01d6"+
    "\1\0\1\u021e\1\0\1\u021e\2\u01d6\1\u021e\4\u01d6\2\u021e"+
    "\1\0\2\u021e\1\0\1\u021e\2\0\6\u021e\1\0\1\u01d6"+
    "\1\u021e\26\u01d6\1\0\1\u021e\1\0\1\u021e\4\u01d6\3\u021e"+
    "\3\u01d6\17\0\1\u021f\74\0\1\17\2\0\1\17\4\u0220"+
    "\1\17\1\0\4\17\2\0\2\17\2\u0220\20\0\2\17"+
    "\2\u0220\3\17\2\u0220\10\17\1\u0220\2\17\1\u0220\3\17"+
    "\4\0\3\u0220\1\17\3\0\3\17\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\1\u0221\25\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\1\u0222\25\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\5\22\1\251\20\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\4\22\1\u0223\21\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\10\22\1\u0224\15\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\22\22\1\251\3\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\12\22\1\u0225\13\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\12\22\1\u0226\13\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\6\22\1\u017f\17\22\4\0\4\22\3\0\3\22\1\0"+
    "\1\17\2\0\6\22\1\0\1\17\1\166\2\22\2\0"+
    "\4\22\20\0\1\22\1\17\17\22\1\u0107\6\22\4\0"+
    "\4\22\3\0\3\22\1\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\u0227\1\17"+
    "\26\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\10\22\1\u0228\15\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\12\22\1\u0229"+
    "\13\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\22\22\1\u022a\3\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\11\22\1\376"+
    "\14\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\7\22\1\244\16\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\2\22\1\u022b\1\22\20\0\1\22\1\17"+
    "\26\22\4\0\4\22\3\0\2\22\1\u022c\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\11\22\1\u010a\14\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\5\22"+
    "\1\u022d\20\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\10\22\1\u022e\15\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\7\22"+
    "\1\u022f\16\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\10\22\1\u0230\15\22\4\0\4\22"+
    "\3\0\3\22\17\0\1\u0198\150\0\1\u0231\120\0\1\u01c0"+
    "\110\0\1\u01a6\107\0\1\u0141\117\0\1\u020d\104\0\1\u0232"+
    "\110\0\1\u0233\110\0\1\u01a9\110\0\1\u0234\122\0\1\u01c1"+
    "\117\0\1\u01a9\114\0\1\u0235\107\0\1\u0236\102\0\1\u0237"+
    "\116\0\1\u0238\103\0\1\u0239\113\0\1\u023a\113\0\1\u023b"+
    "\113\0\1\u023c\111\0\1\u01a6\127\0\1\u01f6\76\0\1\u023d"+
    "\112\0\1\u023e\120\0\1\u023f\104\0\1\u0141\106\0\1\u0142"+
    "\116\0\1\u01a6\106\0\1\u0240\114\0\1\u0241\116\0\1\u0242"+
    "\46\0\1\u0243\150\0\1\u0244\120\0\1\u0245\112\0\1\u0246"+
    "\104\0\1\u0247\122\0\1\u0248\52\0\1\u01cc\156\0\1\u0249"+
    "\114\0\1\u024a\44\0\1\u01d1\176\0\1\u024b\26\0\1\u01d6"+
    "\74\0\1\17\2\0\1\17\4\22\1\17\1\0\4\17"+
    "\2\0\2\17\2\22\20\0\2\17\2\22\3\17\2\22"+
    "\10\17\1\22\2\17\1\22\3\17\4\0\3\22\1\17"+
    "\3\0\3\17\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\5\22"+
    "\1\244\20\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\12\22\1\372\13\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\14\22"+
    "\1\u024c\11\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\6\22\1\u024d\17\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\5\22\1\u010a\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\26\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\6\22\1\u024e\17\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\3\22\1\u01e3"+
    "\22\22\4\0\4\22\3\0\3\22\1\0\1\17\2\0"+
    "\6\22\1\0\1\17\1\166\2\22\2\0\4\22\20\0"+
    "\1\22\1\17\5\22\1\u0108\20\22\4\0\4\22\3\0"+
    "\3\22\1\0\1\17\2\0\6\22\1\0\1\17\1\166"+
    "\2\22\2\0\4\22\20\0\1\22\1\17\1\u024f\25\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\7\22\1\u0250\16\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\12\22\1\u0251\13\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\3\22\1\u0252\22\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\14\22\1\u0253\11\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\21\22\1\251\4\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\3\22\1\u022f\22\22"+
    "\4\0\4\22\3\0\3\22\53\0\1\u0254\120\0\1\u023e"+
    "\100\0\1\u0255\116\0\1\u0256\114\0\1\u0257\116\0\1\u0258"+
    "\112\0\1\u0259\104\0\1\u01c8\106\0\1\u025a\131\0\1\u025b"+
    "\73\0\1\u01b4\3\0\1\u025c\116\0\1\u025d\114\0\1\u020e"+
    "\103\0\1\u01a9\111\0\1\u0141\117\0\1\u01a6\123\0\1\u025e"+
    "\77\0\1\u025f\114\0\1\u0206\106\0\1\u0141\114\0\1\u0260"+
    "\111\0\1\u0261\111\0\1\u0216\123\0\1\u01f5\102\0\1\u0262"+
    "\40\0\26\u024a\1\u01a6\64\u024a\103\0\1\u0263\7\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\12\22\1\u0264\13\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\12\22"+
    "\1\244\13\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\12\22\1\u0265\13\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\5\22"+
    "\1\u010a\20\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\14\22\1\u0266\11\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\3\22"+
    "\1\u017f\22\22\4\0\4\22\3\0\3\22\1\0\1\17"+
    "\2\0\6\22\1\0\1\17\1\166\2\22\2\0\4\22"+
    "\20\0\1\22\1\17\6\22\1\u012f\17\22\4\0\4\22"+
    "\3\0\3\22\1\0\1\17\2\0\6\22\1\0\1\17"+
    "\1\166\2\22\2\0\4\22\20\0\1\22\1\17\12\22"+
    "\1\251\13\22\4\0\4\22\3\0\3\22\63\0\1\u0257"+
    "\103\0\1\u0206\126\0\1\u01a6\113\0\1\u01a6\77\0\1\u0256"+
    "\110\0\1\u01ba\113\0\1\u0267\46\0\1\u0268\161\0\1\u0269"+
    "\101\0\1\u01a7\112\0\1\u0260\115\0\1\u026a\112\0\1\u0256"+
    "\117\0\1\u026b\136\0\1\u026c\10\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\10\22\1\u026d\15\22\4\0\4\22\3\0\3\22"+
    "\1\0\1\17\2\0\6\22\1\0\1\17\1\166\2\22"+
    "\2\0\4\22\20\0\1\22\1\17\3\22\1\u0107\22\22"+
    "\4\0\4\22\3\0\3\22\1\0\1\17\2\0\6\22"+
    "\1\0\1\17\1\166\2\22\2\0\4\22\20\0\1\22"+
    "\1\17\1\u0251\25\22\4\0\4\22\3\0\3\22\51\0"+
    "\1\u01c1\115\0\1\u026e\120\0\1\u0206\105\0\1\u01c0\104\0"+
    "\1\u026f\143\0\1\u0270\13\0\1\17\2\0\6\22\1\0"+
    "\1\17\1\166\2\22\2\0\4\22\20\0\1\22\1\17"+
    "\26\22\4\0\4\22\3\0\1\u0252\2\22\52\0\1\u0271"+
    "\116\0\1\u024a\105\0\1\u01a6\11\0\1\u020d\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[42225];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\2\1\1\0\2\1\1\11\4\1\1\11\4\1"+
    "\2\11\4\1\1\11\24\1\2\11\3\1\1\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\1\1\11\5\1"+
    "\1\11\10\1\1\11\5\1\1\11\2\1\1\11\1\1"+
    "\1\11\5\1\1\11\2\1\1\11\1\1\3\11\3\1"+
    "\3\11\1\1\1\11\15\1\2\0\1\11\3\1\2\0"+
    "\1\11\64\1\1\11\2\1\1\11\4\0\1\11\2\0"+
    "\1\11\32\0\3\1\2\11\5\0\1\11\2\0\2\1"+
    "\1\0\76\1\64\0\1\1\2\0\1\11\5\0\1\11"+
    "\1\1\1\11\44\1\1\0\1\11\1\0\1\1\15\0"+
    "\1\11\45\0\1\1\4\0\1\1\1\0\1\11\2\0"+
    "\1\1\1\0\1\11\30\1\15\0\1\1\20\0\1\1"+
    "\20\0\21\1\33\0\11\1\4\0\1\1\12\0\3\1"+
    "\6\0\1\1\2\0\1\11\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[625];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

	/**
	 * Token type specifying we're in a JavaScript multiline comment.
	 */
	private static final int INTERNAL_IN_JS_MLC				= -8;

	/**
	 * Token type specifying we're in a JavaScript documentation comment.
	 */
	private static final int INTERNAL_IN_JS_COMMENT_DOCUMENTATION = -9;

	/**
	 * Token type specifying we're in an invalid multi-line JS string.
	 */
	private static final int INTERNAL_IN_JS_STRING_INVALID	= -10;

	/**
	 * Token type specifying we're in a valid multi-line JS string.
	 */
	private static final int INTERNAL_IN_JS_STRING_VALID		= -11;

	/**
	 * Token type specifying we're in an invalid multi-line JS single-quoted string.
	 */
	private static final int INTERNAL_IN_JS_CHAR_INVALID	= -12;

	/**
	 * Token type specifying we're in a valid multi-line JS single-quoted string.
	 */
	private static final int INTERNAL_IN_JS_CHAR_VALID		= -13;

	private static final int INTERNAL_E4X = -14;

	private static final int INTERNAL_E4X_INTAG = -15;

	private static final int INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION = -16;

	private static final int INTERNAL_IN_E4X_COMMENT = -17;

	private static final int INTERNAL_E4X_DTD = -18;

	private static final int INTERNAL_E4X_DTD_INTERNAL = -19;

	private static final int INTERNAL_E4X_ATTR_SINGLE = -20;

	private static final int INTERNAL_E4X_ATTR_DOUBLE = -21;

	private static final int INTERNAL_E4X_MARKUP_CDATA = -22;

	/**
	 * When in the JS_STRING state, whether the current string is valid.
	 */
	private boolean validJSString;

	/**
	 * Whether we're in an internal DTD.  Only valid if in an e4x DTD.
	 */
	private boolean e4x_inInternalDtd;

	/**
	 * The previous e4x state.  Only valid if in an e4x state.
	 */
	private int e4x_prevState;

	/**
	 * Whether e4x is being highlighted.
	 */
	private static boolean e4xSupported;

	/**
	 * Language state set on JS tokens.  Must be 0.
	 */
	private static final int LANG_INDEX_DEFAULT	= 0;

	/**
	 * Language state set on E4X tokens.
	 */
	private static final int LANG_INDEX_E4X = 1;

	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public TypeScriptTokenMaker() {
		super();
	}


	static {
		e4xSupported = true;
	}


	/**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the closest {@link TokenTypes "standard" token type} for a given
	 * "internal" token type (e.g. one whose value is <code>&lt; 0</code>).
	 */
	 @Override
	public int getClosestStandardTokenTypeForInternalType(int type) {
		switch (type) {
			case INTERNAL_IN_JS_MLC:
				return TokenTypes.COMMENT_MULTILINE;
			case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
				return TokenTypes.COMMENT_DOCUMENTATION;
			case INTERNAL_IN_JS_STRING_INVALID:
			case INTERNAL_IN_JS_STRING_VALID:
			case INTERNAL_IN_JS_CHAR_INVALID:
			case INTERNAL_IN_JS_CHAR_VALID:
				return TokenTypes.LITERAL_STRING_DOUBLE_QUOTE;
		}
		return type;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;
		validJSString = true;
		e4x_prevState = YYINITIAL;
		e4x_inInternalDtd = false;
		int languageIndex = LANG_INDEX_DEFAULT;

		// Start off in the proper state.
		int state = YYINITIAL;
		switch (initialTokenType) {
			case INTERNAL_IN_JS_MLC:
				state = JS_MLC;
				break;
			case INTERNAL_IN_JS_COMMENT_DOCUMENTATION:
				state = JS_DOCCOMMENT;
				start = text.offset;
				break;
			case INTERNAL_IN_JS_STRING_INVALID:
				state = JS_STRING;
				validJSString = false;
				break;
			case INTERNAL_IN_JS_STRING_VALID:
				state = JS_STRING;
				break;
			case INTERNAL_IN_JS_CHAR_INVALID:
				state = JS_CHAR;
				validJSString = false;
				break;
			case INTERNAL_IN_JS_CHAR_VALID:
				state = JS_CHAR;
				break;
			case INTERNAL_E4X:
				state = E4X;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_INTAG:
				state = E4X_INTAG;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION:
				state = E4X_PI;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_DTD:
				state = E4X_DTD;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_DTD_INTERNAL:
				state = E4X_DTD;
				e4x_inInternalDtd = true;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_ATTR_SINGLE:
				state = E4X_INATTR_SINGLE;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_ATTR_DOUBLE:
				state = E4X_INATTR_DOUBLE;
				languageIndex = LANG_INDEX_E4X;
				break;
			case INTERNAL_E4X_MARKUP_CDATA:
				state = E4X_CDATA;
				languageIndex = LANG_INDEX_E4X;
				break;
			default:
				if (initialTokenType<-1024) { // INTERNAL_IN_E4X_COMMENT - prevState
					int main = -(-initialTokenType & 0xffffff00);
					switch (main) {
						default: // Should never happen
						case INTERNAL_IN_E4X_COMMENT:
							state = E4X_COMMENT;
							break;
					}
					e4x_prevState = -initialTokenType&0xff;
					languageIndex = LANG_INDEX_E4X;
				}
				else { // Shouldn't happen
					state = Token.NULL;
				}
		}

		setLanguageIndex(languageIndex);
		start = text.offset;
		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Returns whether e4x is being highlighted.
	 *
	 * @return Whether e4x is being highlighted.
	 * @see #setE4xSupported(boolean)
	 */
	public static boolean isE4xSupported() {
		return e4xSupported;
	}


	/**
	 * Sets whether e4x should be highlighted.  A repaint should be forced on
	 * all <code>RSyntaxTextArea</code>s editing JavaScript if this property
	 * is changed to see the difference.
	 *
	 * @param supported Whether e4x should be highlighted.
	 * @see #isE4xSupported()
	 */
	public static void setE4xSupported(boolean supported) {
		e4xSupported = supported;
	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TypeScriptTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public TypeScriptTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  @Override
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34:
          { start = zzMarkedPos-1; yybegin(E4X_INATTR_SINGLE);
          }
        case 73: break;
        case 33:
          { start = zzMarkedPos-1; yybegin(E4X_INATTR_DOUBLE);
          }
        case 74: break;
        case 36:
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 75: break;
        case 71:
          { addToken(Token.RESERVED_WORD_2);
          }
        case 76: break;
        case 26:
          { addToken(start,zzStartRead-1, Token.MARKUP_DTD); addEndToken(e4x_inInternalDtd ? INTERNAL_E4X_DTD_INTERNAL : INTERNAL_E4X_DTD); return firstToken;
          }
        case 77: break;
        case 15:
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_CHAR);
									addEndToken(INTERNAL_IN_JS_CHAR_INVALID);
								}
								return firstToken;
          }
        case 78: break;
        case 3:
          { addToken(Token.WHITESPACE);
          }
        case 79: break;
        case 17:
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
          }
        case 80: break;
        case 41:
          { int start = zzStartRead;
										int operatorLen = yycharat(0)=='+' ? 2 : 1;
										int yylen = yylength(); // Cache before first addToken() invalidates it
										//System.out.println("'" + yytext() + "': " + yylength() + ", " + (operatorLen+1));
										addToken(zzStartRead,zzStartRead+operatorLen-1, Token.OPERATOR);
										if (yylen>operatorLen+1) {
											//System.out.println((start+operatorLen) + ", " + (zzMarkedPos-2));
											addToken(start+operatorLen,zzMarkedPos-2, Token.WHITESPACE);
										}
										zzStartRead = zzCurrentPos = zzMarkedPos = zzMarkedPos - 1;
										if (isE4xSupported()) {
											// Scanning will continue with "<" as markup tag start
											yybegin(E4X, LANG_INDEX_E4X);
										}
										// Found e4x (or syntax error) but option not enabled;
										// Scanning will continue at "<" as operator
          }
        case 81: break;
        case 63:
          { addToken(Token.FUNCTION);
          }
        case 82: break;
        case 49:
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_MARKUP); start = zzMarkedPos;
          }
        case 83: break;
        case 44:
          { /* Skip all escaped chars. */
          }
        case 84: break;
        case 11:
          { addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 85: break;
        case 68:
          { start = zzStartRead; e4x_prevState = zzLexicalState; yybegin(E4X_COMMENT);
          }
        case 86: break;
        case 59:
          { int temp=zzStartRead; yybegin(E4X); addToken(start,zzStartRead-1, Token.MARKUP_CDATA); addToken(temp,zzMarkedPos-1, Token.MARKUP_CDATA_DELIMITER);
          }
        case 87: break;
        case 57:
          { int count = yylength();
									addToken(zzStartRead,zzStartRead+1, Token.MARKUP_TAG_DELIMITER);
									addToken(zzMarkedPos-(count-2), zzMarkedPos-1, Token.MARKUP_TAG_NAME);
									yybegin(E4X_INTAG);
          }
        case 88: break;
        case 46:
          { /* Invalid latin-1 character \xXX */ validJSString = false;
          }
        case 89: break;
        case 60:
          { addToken(Token.COMMENT_MULTILINE);
          }
        case 90: break;
        case 52:
          { start = zzMarkedPos-2; yybegin(E4X_PI);
          }
        case 91: break;
        case 35:
          { yybegin(E4X_INTAG); addToken(start,zzStartRead, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
          }
        case 92: break;
        case 13:
          { int type = validJSString ? Token.LITERAL_STRING_DOUBLE_QUOTE : Token.ERROR_STRING_DOUBLE; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 93: break;
        case 19:
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 94: break;
        case 23:
          { yybegin(YYINITIAL, LANG_INDEX_DEFAULT); addToken(Token.IDENTIFIER);
          }
        case 95: break;
        case 45:
          { /* Invalid Unicode character \\uXXXX */ validJSString = false;
          }
        case 96: break;
        case 70:
          { int temp = zzStartRead; addToken(start,zzStartRead-1, Token.MARKUP_DTD); start = temp; e4x_prevState = zzLexicalState; yybegin(E4X_COMMENT);
          }
        case 97: break;
        case 62:
          { if(e4xSupported){ addToken(Token.RESERVED_WORD);} else {addToken(Token.IDENTIFIER);}
          }
        case 98: break;
        case 58:
          { int temp = zzMarkedPos; addToken(start,zzStartRead+2, Token.MARKUP_COMMENT); start = temp; yybegin(e4x_prevState);
          }
        case 99: break;
        case 7:
          { addToken(Token.OPERATOR);
          }
        case 100: break;
        case 53:
          { yybegin(E4X); addToken(start,zzStartRead+1, Token.MARKUP_PROCESSING_INSTRUCTION);
          }
        case 101: break;
        case 48:
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_DOCUMENTATION);
          }
        case 102: break;
        case 18:
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
          }
        case 103: break;
        case 25:
          { addToken(start,zzStartRead-1, Token.MARKUP_PROCESSING_INSTRUCTION); addEndToken(INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION); return firstToken;
          }
        case 104: break;
        case 5:
          { addToken(Token.IDENTIFIER);
          }
        case 105: break;
        case 64:
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 106: break;
        case 42:
          { addToken(isE4xSupported() ? Token.MARKUP_TAG_ATTRIBUTE : Token.ERROR_IDENTIFIER);
          }
        case 107: break;
        case 67:
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 108: break;
        case 55:
          { start = zzMarkedPos-3; yybegin(JS_DOCCOMMENT);
          }
        case 109: break;
        case 9:
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_STRING);
          }
        case 110: break;
        case 51:
          { start = zzMarkedPos-2; e4x_inInternalDtd = false; yybegin(E4X_DTD);
          }
        case 111: break;
        case 24:
          { addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addEndToken(INTERNAL_IN_E4X_COMMENT - e4x_prevState); return firstToken;
          }
        case 112: break;
        case 10:
          { start = zzMarkedPos-1; validJSString = true; yybegin(JS_CHAR);
          }
        case 113: break;
        case 28:
          { e4x_inInternalDtd = true;
          }
        case 114: break;
        case 66:
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 115: break;
        case 40:
          { start = zzMarkedPos-2; yybegin(JS_MLC);
          }
        case 116: break;
        case 38:
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 117: break;
        case 72:
          { addToken(Token.MARKUP_CDATA_DELIMITER); start = zzMarkedPos; yybegin(E4X_CDATA);
          }
        case 118: break;
        case 31:
          { addToken(Token.MARKUP_TAG_DELIMITER); /* Not valid but we'll still accept it */
          }
        case 119: break;
        case 2:
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 120: break;
        case 69:
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addHyperlinkToken(temp,zzMarkedPos-1, Token.MARKUP_COMMENT); start = zzMarkedPos;
          }
        case 121: break;
        case 32:
          { yybegin(E4X); addToken(Token.MARKUP_TAG_DELIMITER);
          }
        case 122: break;
        case 22:
          { addToken(Token.MARKUP_ENTITY_REFERENCE);
          }
        case 123: break;
        case 61:
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 124: break;
        case 4:
          { addNullToken(); return firstToken;
          }
        case 125: break;
        case 43:
          { addToken(Token.RESERVED_WORD);
          }
        case 126: break;
        case 47:
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 127: break;
        case 56:
          { addToken(Token.DATA_TYPE);
          }
        case 128: break;
        case 21:
          { addToken(Token.MARKUP_TAG_DELIMITER); yybegin(E4X_INTAG);
          }
        case 129: break;
        case 8:
          { addToken(Token.SEPARATOR);
          }
        case 130: break;
        case 30:
          { addToken(Token.MARKUP_TAG_ATTRIBUTE);
          }
        case 131: break;
        case 65:
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addToken(temp,zzMarkedPos-1, Token.COMMENT_KEYWORD); start = zzMarkedPos;
          }
        case 132: break;
        case 16:
          { int type = validJSString ? Token.LITERAL_CHAR : Token.ERROR_CHAR; addToken(start,zzStartRead, type); yybegin(YYINITIAL);
          }
        case 133: break;
        case 39:
          { start = zzMarkedPos-2; yybegin(JS_EOL_COMMENT);
          }
        case 134: break;
        case 20:
          { addEndToken(INTERNAL_E4X); return firstToken;
          }
        case 135: break;
        case 12:
          { /* Line ending in '\' => continue to next line. */
								if (validJSString) {
									addToken(start,zzStartRead, Token.LITERAL_STRING_DOUBLE_QUOTE);
									addEndToken(INTERNAL_IN_JS_STRING_VALID);
								}
								else {
									addToken(start,zzStartRead, Token.ERROR_STRING_DOUBLE);
									addEndToken(INTERNAL_IN_JS_STRING_INVALID);
								}
								return firstToken;
          }
        case 136: break;
        case 37:
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 137: break;
        case 50:
          { int count = yylength();
									addToken(zzStartRead,zzStartRead, Token.MARKUP_TAG_DELIMITER);
									addToken(zzMarkedPos-(count-1), zzMarkedPos-1, Token.MARKUP_TAG_NAME);
									yybegin(E4X_INTAG);
          }
        case 138: break;
        case 54:
          { boolean highlightedAsRegex = false;
										if (firstToken==null) {
											addToken(Token.REGEX);
											highlightedAsRegex = true;
										}
										else {
											// If this is *likely* to be a regex, based on
											// the previous token, highlight it as such.
											Token t = firstToken.getLastNonCommentNonWhitespaceToken();
											if (RSyntaxUtilities.regexCanFollowInJavaScript(t)) {
												addToken(Token.REGEX);
												highlightedAsRegex = true;
											}
										}
										// If it doesn't *appear* to be a regex, highlight it as
										// individual tokens.
										if (!highlightedAsRegex) {
											int temp = zzStartRead + 1;
											addToken(zzStartRead, zzStartRead, Token.OPERATOR);
											zzStartRead = zzCurrentPos = zzMarkedPos = temp;
										}
          }
        case 139: break;
        case 27:
          { if (!e4x_inInternalDtd) { yybegin(E4X); addToken(start,zzStartRead, Token.MARKUP_DTD); }
          }
        case 140: break;
        case 6:
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 141: break;
        case 29:
          { e4x_inInternalDtd = false;
          }
        case 142: break;
        case 14:
          { addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 143: break;
        case 1:
          {
          }
        case 144: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case JS_STRING: {
              addToken(start,zzStartRead-1, Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
            case 626: break;
            case E4X: {
              addEndToken(INTERNAL_E4X); return firstToken;
            }
            case 627: break;
            case E4X_INTAG: {
              addToken(start,zzStartRead-1, INTERNAL_E4X_INTAG); return firstToken;
            }
            case 628: break;
            case E4X_PI: {
              addToken(start,zzStartRead-1, Token.MARKUP_PROCESSING_INSTRUCTION); addEndToken(INTERNAL_E4X_MARKUP_PROCESSING_INSTRUCTION); return firstToken;
            }
            case 629: break;
            case JS_MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addEndToken(INTERNAL_IN_JS_MLC); return firstToken;
            }
            case 630: break;
            case JS_CHAR: {
              addToken(start,zzStartRead-1, Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
            case 631: break;
            case JS_EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 632: break;
            case E4X_COMMENT: {
              addToken(start,zzStartRead-1, Token.MARKUP_COMMENT); addEndToken(INTERNAL_IN_E4X_COMMENT - e4x_prevState); return firstToken;
            }
            case 633: break;
            case JS_DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); addEndToken(INTERNAL_IN_JS_COMMENT_DOCUMENTATION); return firstToken;
            }
            case 634: break;
            case E4X_DTD: {
              addToken(start,zzStartRead-1, Token.MARKUP_DTD); addEndToken(e4x_inInternalDtd ? INTERNAL_E4X_DTD_INTERNAL : INTERNAL_E4X_DTD); return firstToken;
            }
            case 635: break;
            case E4X_INATTR_SINGLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_E4X_ATTR_SINGLE); return firstToken;
            }
            case 636: break;
            case E4X_INATTR_DOUBLE: {
              addToken(start,zzStartRead-1, Token.MARKUP_TAG_ATTRIBUTE_VALUE); addEndToken(INTERNAL_E4X_ATTR_DOUBLE); return firstToken;
            }
            case 637: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 638: break;
            case E4X_CDATA: {
              addToken(start,zzStartRead-1, Token.MARKUP_CDATA); addEndToken(INTERNAL_E4X_MARKUP_CDATA); return firstToken;
            }
            case 639: break;
            default:
            return null;
            }
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

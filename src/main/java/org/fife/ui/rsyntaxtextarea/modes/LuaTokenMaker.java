/* The following code was generated by JFlex 1.6.1 */

/*
 * 07/14/2006
 *
 * LuaTokenMaker.java - Scanner for the Lua programming language.
 * 
 * This library is distributed under a modified BSD license.  See the included
 * RSyntaxTextArea.License.txt file for details.
 */
package org.fife.ui.rsyntaxtextarea.modes;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * Scanner for the Lua programming language.<p>
 *
 * This implementation was created using
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1; however, the generated file
 * was modified for performance.  Memory allocation needs to be almost
 * completely removed to be competitive with the handwritten lexers (subclasses
 * of <code>AbstractTokenMaker</code>, so this class has been modified so that
 * Strings are never allocated (via yytext()), and the scanner never has to
 * worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a
 * time, and hands the scanner this line as an array of characters (a Segment
 * really).  Since tokens contain pointers to char arrays instead of Strings
 * holding their contents, there is no need for allocating new memory for
 * Strings.<p>
 *
 * The actual algorithm generated for scanning has, of course, not been
 * modified.<p>
 *
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 *   <li>The generated <code>LuaTokenMaker.java</code> file will contain two
 *       definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 *       You should hand-delete the second of each definition (the ones
 *       generated by the lexer), as these generated methods modify the input
 *       buffer, which we'll never have to do.</li>
 *   <li>You should also change the declaration/definition of zzBuffer to NOT
 *       be initialized.  This is a needless memory allocation for us since we
 *       will be pointing the array somewhere else anyway.</li>
 *   <li>You should NOT call <code>yylex()</code> on the generated scanner
 *       directly; rather, you should use <code>getTokenList</code> as you would
 *       with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 *
 * @author Robert Futrell
 * @author Ralph Niemitz(just fixed something)
 * @version 0.4.1
 *
 */

public class LuaTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;
  public static final int LONGSTRING = 4;
  public static final int LINECOMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\3\1\66\1\4\1\66\22\0\1\4\1\0\1\7"+
    "\1\27\1\0\1\27\1\0\1\5\2\26\1\27\1\15\1\0\1\12"+
    "\1\13\1\27\12\2\2\0\1\30\1\32\1\31\2\0\4\1\1\14"+
    "\1\1\1\54\1\1\1\60\2\1\1\52\1\1\1\50\1\61\2\1"+
    "\1\56\1\57\1\1\1\51\1\55\4\1\1\10\1\6\1\11\1\27"+
    "\1\53\1\0\1\23\1\37\1\42\1\35\1\21\1\22\1\46\1\44"+
    "\1\41\1\1\1\40\1\24\1\47\1\34\1\36\1\43\1\64\1\17"+
    "\1\25\1\16\1\20\1\62\1\45\1\63\1\65\1\1\1\26\1\0"+
    "\1\26\1\33\6\0\1\66\u1fa2\0\1\66\1\66\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\1\1\10\10\1\2\10\16\1\1\11\1\12"+
    "\1\11\1\13\2\11\1\14\2\2\1\15\1\5\1\6"+
    "\1\16\1\17\1\20\1\10\21\1\3\0\3\1\1\21"+
    "\1\10\1\1\1\21\12\1\1\22\2\1\1\23\1\24"+
    "\1\15\1\16\1\0\24\1\4\0\14\1\1\25\1\26"+
    "\11\1\1\21\2\1\1\22\3\1\4\0\6\1\1\27"+
    "\13\1\1\27\2\0\10\1\2\0\15\1";

  private static int [] zzUnpackAction() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\334"+
    "\0\u0181\0\u01b8\0\u01ef\0\u0226\0\334\0\u025d\0\u0294\0\334"+
    "\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c"+
    "\0\u0483\0\u04ba\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0596\0\u05cd"+
    "\0\u0604\0\u063b\0\u0672\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785"+
    "\0\u07bc\0\334\0\u07f3\0\334\0\u082a\0\u0861\0\334\0\u0898"+
    "\0\u08cf\0\334\0\u0906\0\u093d\0\334\0\334\0\u0974\0\u09ab"+
    "\0\u09e2\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63"+
    "\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b"+
    "\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3"+
    "\0\u0113\0\u0f0a\0\u0113\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u0113\0\u1167\0\u119e"+
    "\0\334\0\334\0\u01b8\0\u01ef\0\u11d5\0\u120c\0\u1243\0\u127a"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2"+
    "\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a"+
    "\0\u1991\0\334\0\u0113\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4"+
    "\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c"+
    "\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u0113\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\334\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce"+
    "\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f\0\u2486"+
    "\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0\0\u2607\0\u263e"+
    "\0\u2675\0\u26ac\0\u26e3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\5\1\13"+
    "\1\14\1\15\1\16\1\17\1\6\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\1\15\1\20"+
    "\1\31\1\32\2\33\1\34\1\35\1\36\1\37\1\6"+
    "\1\40\1\41\1\42\1\6\1\43\1\44\1\45\1\46"+
    "\2\6\1\47\7\6\1\50\2\6\1\0\3\51\1\52"+
    "\5\51\1\53\60\51\1\54\5\51\1\55\55\51\3\56"+
    "\1\57\63\56\70\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\32\6\2\0\1\60\1\7\10\0\1\7\1\61"+
    "\1\0\3\60\1\61\4\60\6\0\32\60\5\0\1\11"+
    "\62\0\3\12\1\0\1\12\1\62\1\63\60\12\3\13"+
    "\1\0\2\13\1\64\1\65\57\13\10\0\1\66\70\0"+
    "\1\67\56\0\1\7\10\0\1\70\54\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\71\6\6\6\0\2\6\1\72"+
    "\5\6\1\73\20\6\1\74\2\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\75\1\6\1\76\2\6\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\1\77"+
    "\31\6\2\0\2\6\11\0\1\6\1\0\1\6\1\100"+
    "\4\6\1\101\1\6\6\0\1\102\31\6\2\0\2\6"+
    "\11\0\1\6\1\0\2\6\1\103\2\6\1\104\2\6"+
    "\6\0\2\6\1\105\27\6\2\0\2\6\11\0\1\6"+
    "\1\0\7\6\1\106\6\0\1\107\31\6\2\0\2\6"+
    "\11\0\1\6\1\0\10\6\6\0\2\6\1\110\27\6"+
    "\2\0\2\6\11\0\1\6\1\0\3\6\1\111\4\6"+
    "\6\0\32\6\22\0\1\112\3\0\1\113\4\0\1\20"+
    "\1\0\1\114\64\0\1\20\35\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\115\4\6\6\0\2\6\1\116\2\6"+
    "\1\117\24\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\2\6\1\120\27\6\2\0\2\6\11\0\1\6"+
    "\1\0\1\6\1\121\6\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\1\6\1\122\6\6\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\4\6\1\123\3\6"+
    "\6\0\1\123\6\6\1\124\22\6\2\0\2\6\11\0"+
    "\1\6\1\0\10\6\6\0\2\6\1\125\27\6\2\0"+
    "\2\6\11\0\1\6\1\0\1\6\1\126\3\6\1\127"+
    "\2\6\6\0\6\6\1\130\23\6\2\0\2\6\11\0"+
    "\1\6\1\0\10\6\6\0\10\6\1\131\21\6\2\0"+
    "\2\6\11\0\1\6\1\0\3\6\1\132\4\6\6\0"+
    "\2\6\1\133\27\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\2\6\1\134\27\6\2\0\2\6\11\0"+
    "\1\6\1\0\10\6\6\0\15\6\1\135\14\6\2\0"+
    "\2\6\11\0\1\6\1\0\10\6\6\0\20\6\1\136"+
    "\1\137\10\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\7\6\1\140\22\6\1\0\3\51\1\0\5\51"+
    "\1\0\55\51\11\0\1\141\66\0\1\142\55\0\3\56"+
    "\1\0\63\56\1\0\2\60\11\0\1\60\1\0\10\60"+
    "\6\0\32\60\2\0\2\60\7\0\1\60\1\0\12\60"+
    "\6\0\32\60\1\0\3\12\1\0\1\12\1\143\1\63"+
    "\60\12\3\13\1\0\2\13\1\64\1\144\57\13\10\0"+
    "\1\145\71\0\1\20\54\0\2\6\11\0\1\6\1\0"+
    "\2\6\1\146\5\6\6\0\32\6\2\0\2\6\11\0"+
    "\1\6\1\0\7\6\1\147\6\0\1\150\31\6\2\0"+
    "\2\6\11\0\1\6\1\0\3\6\1\151\4\6\6\0"+
    "\32\6\2\0\2\6\11\0\1\6\1\0\10\6\6\0"+
    "\7\6\1\152\22\6\2\0\2\6\11\0\1\6\1\0"+
    "\1\153\7\6\6\0\7\6\1\154\20\6\1\155\1\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\11\6"+
    "\1\156\20\6\2\0\2\6\11\0\1\6\1\0\1\157"+
    "\7\6\6\0\7\6\1\160\22\6\2\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\161\6\6\6\0\32\6\2\0"+
    "\2\6\11\0\1\6\1\0\7\6\1\162\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\1\6"+
    "\1\123\30\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\1\163\31\6\2\0\2\6\11\0\1\6\1\0"+
    "\6\6\1\164\1\6\6\0\32\6\2\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\123\6\6\6\0\32\6\2\0"+
    "\2\6\11\0\1\6\1\0\7\6\1\165\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\1\6"+
    "\1\121\30\6\2\0\2\6\11\0\1\6\1\0\5\6"+
    "\1\166\2\6\6\0\6\6\1\167\23\6\2\0\2\6"+
    "\11\0\1\6\1\0\1\170\5\6\1\171\1\6\6\0"+
    "\32\6\37\0\1\172\46\0\1\173\70\0\1\174\2\0"+
    "\1\175\44\0\2\6\11\0\1\6\1\0\10\6\6\0"+
    "\27\6\1\176\2\6\2\0\2\6\11\0\1\6\1\0"+
    "\1\121\7\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\6\6\1\123\1\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\4\6\1\177\3\6\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\3\6\1\200\4\6"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\5\6"+
    "\1\127\2\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\6\6\1\201\1\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\10\6\6\0\5\6\1\202\24\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\5\6"+
    "\1\203\24\6\2\0\2\6\11\0\1\6\1\0\5\6"+
    "\1\204\2\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\10\6\6\0\5\6\1\205\24\6\2\0\2\6"+
    "\11\0\1\6\1\0\1\170\7\6\6\0\32\6\2\0"+
    "\2\6\11\0\1\6\1\0\1\206\7\6\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\1\6"+
    "\1\207\30\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\16\6\1\210\13\6\2\0\2\6\11\0\1\211"+
    "\1\0\10\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\10\6\6\0\6\6\1\130\23\6\11\0\1\212"+
    "\57\0\2\6\11\0\1\6\1\0\3\6\1\213\4\6"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\1\214"+
    "\7\6\6\0\32\6\2\0\2\6\11\0\1\6\1\0"+
    "\2\6\1\215\5\6\6\0\32\6\2\0\2\6\11\0"+
    "\1\6\1\0\10\6\6\0\1\123\31\6\2\0\2\6"+
    "\11\0\1\6\1\0\3\6\1\136\4\6\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\2\6\1\216\5\6"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\3\6"+
    "\1\217\4\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\2\6\1\220\5\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\3\6\1\221\3\6\1\222\6\0"+
    "\12\6\1\222\17\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\5\6\1\117\24\6\2\0\2\6\11\0"+
    "\1\6\1\0\5\6\1\223\2\6\6\0\32\6\2\0"+
    "\2\6\11\0\1\6\1\0\10\6\6\0\2\6\1\224"+
    "\27\6\2\0\2\6\11\0\1\6\1\0\3\6\1\225"+
    "\4\6\6\0\32\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\6\6\1\226\23\6\2\0\2\6\11\0"+
    "\1\6\1\0\7\6\1\146\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\3\6\1\227\4\6\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\1\6"+
    "\1\230\30\6\2\0\2\6\11\0\1\6\1\0\5\6"+
    "\1\117\2\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\4\6\1\231\3\6\6\0\13\6\1\232\16\6"+
    "\2\0\2\6\11\0\1\6\1\0\3\6\1\233\4\6"+
    "\6\0\32\6\23\0\1\234\63\0\1\235\116\0\1\236"+
    "\66\0\1\237\20\0\2\6\11\0\1\6\1\0\1\136"+
    "\7\6\6\0\32\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\5\6\1\240\24\6\2\0\2\6\11\0"+
    "\1\6\1\0\5\6\1\241\2\6\6\0\32\6\2\0"+
    "\2\6\11\0\1\6\1\0\6\6\1\242\1\6\6\0"+
    "\32\6\2\0\2\6\11\0\1\6\1\0\10\6\6\0"+
    "\1\176\31\6\2\0\2\6\11\0\1\6\1\0\1\6"+
    "\1\243\6\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\6\6\1\244\1\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\6\6\1\245\1\6\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\2\6"+
    "\1\123\27\6\2\0\2\6\11\0\1\6\1\0\2\6"+
    "\1\240\5\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\10\6\6\0\16\6\1\246\13\6\2\0\2\6"+
    "\11\0\1\6\1\0\10\6\6\0\22\6\1\247\7\6"+
    "\2\0\2\6\11\0\1\6\1\0\1\6\1\250\6\6"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\13\6\1\251\16\6\2\0\2\6\11\0\1\6"+
    "\1\0\1\6\1\151\6\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\5\6\1\252\2\6\6\0\32\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\5\6"+
    "\1\253\24\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\30\6\1\254\1\6\2\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\176\4\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\10\6\6\0\6\6\1\255\23\6"+
    "\2\0\2\6\11\0\1\6\1\0\1\6\1\136\6\6"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\5\6\1\256\24\6\2\0\2\6\11\0\1\6"+
    "\1\0\1\257\7\6\6\0\32\6\2\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\176\6\6\6\0\32\6\2\0"+
    "\2\6\11\0\1\6\1\0\4\6\1\177\2\6\1\147"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\3\6"+
    "\1\260\4\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\261\4\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\10\6\6\0\6\6\1\176\23\6"+
    "\32\0\1\262\76\0\1\263\64\0\1\264\50\0\1\234"+
    "\46\0\2\6\11\0\1\6\1\0\6\6\1\152\1\6"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\4\6\1\123\25\6\2\0\2\6\11\0\1\6"+
    "\1\0\3\6\1\265\4\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\7\6\1\136\6\0\32\6\2\0"+
    "\2\6\11\0\1\6\1\0\6\6\1\136\1\6\6\0"+
    "\32\6\2\0\2\6\11\0\1\6\1\0\3\6\1\123"+
    "\4\6\6\0\32\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\23\6\1\266\6\6\2\0\2\6\11\0"+
    "\1\6\1\0\10\6\6\0\5\6\1\267\24\6\2\0"+
    "\2\6\11\0\1\6\1\0\10\6\6\0\3\6\1\270"+
    "\26\6\2\0\2\6\11\0\1\6\1\0\1\123\7\6"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\1\6"+
    "\1\152\6\6\6\0\32\6\2\0\2\6\11\0\1\6"+
    "\1\0\2\6\1\271\5\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\10\6\6\0\4\6\1\136\25\6"+
    "\2\0\2\6\11\0\1\6\1\0\4\6\1\123\3\6"+
    "\6\0\32\6\2\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\5\6\1\272\24\6\2\0\2\6\11\0\1\6"+
    "\1\0\10\6\6\0\1\273\31\6\2\0\2\6\11\0"+
    "\1\6\1\0\1\274\7\6\6\0\32\6\35\0\1\275"+
    "\53\0\1\276\46\0\2\6\11\0\1\6\1\0\10\6"+
    "\6\0\6\6\1\277\23\6\2\0\2\6\11\0\1\6"+
    "\1\0\10\6\6\0\24\6\1\300\5\6\2\0\2\6"+
    "\11\0\1\6\1\0\10\6\6\0\1\301\31\6\2\0"+
    "\2\6\11\0\1\6\1\0\3\6\1\224\4\6\6\0"+
    "\32\6\2\0\2\6\11\0\1\6\1\0\5\6\1\244"+
    "\2\6\6\0\32\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\2\6\1\151\27\6\2\0\2\6\11\0"+
    "\1\6\1\0\10\6\6\0\26\6\1\136\3\6\2\0"+
    "\2\6\11\0\1\6\1\0\5\6\1\302\2\6\6\0"+
    "\32\6\47\0\1\234\37\0\1\234\50\0\2\6\11\0"+
    "\1\6\1\0\1\303\7\6\6\0\32\6\2\0\2\6"+
    "\11\0\1\6\1\0\10\6\6\0\25\6\1\304\4\6"+
    "\2\0\2\6\11\0\1\6\1\0\10\6\6\0\12\6"+
    "\1\136\17\6\2\0\2\6\11\0\1\6\1\0\1\305"+
    "\7\6\6\0\32\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\12\6\1\306\17\6\2\0\2\6\11\0"+
    "\1\6\1\0\10\6\6\0\14\6\1\136\15\6\2\0"+
    "\2\6\11\0\1\6\1\0\5\6\1\307\2\6\6\0"+
    "\32\6\2\0\2\6\11\0\1\6\1\0\5\6\1\310"+
    "\2\6\6\0\32\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\3\6\1\240\26\6\2\0\2\6\11\0"+
    "\1\6\1\0\1\6\1\311\6\6\6\0\32\6\2\0"+
    "\2\6\11\0\1\6\1\0\10\6\6\0\3\6\1\312"+
    "\26\6\2\0\2\6\11\0\1\6\1\0\5\6\1\313"+
    "\2\6\6\0\32\6\2\0\2\6\11\0\1\6\1\0"+
    "\10\6\6\0\12\6\1\152\17\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10010];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\2\1\1\11\4\1\1\11\2\1\1\11"+
    "\31\1\1\11\1\1\1\11\2\1\1\11\2\1\1\11"+
    "\2\1\2\11\23\1\3\0\24\1\2\11\2\1\1\0"+
    "\24\1\4\0\14\1\1\11\21\1\4\0\22\1\1\11"+
    "\2\0\10\1\2\0\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[203];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public LuaTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	@Override
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "--", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			case Token.LITERAL_STRING_DOUBLE_QUOTE:
				state = LONGSTRING;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LuaTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 204: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 205: break;
            case LONGSTRING: {
              addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
            case 206: break;
            case LINECOMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); return firstToken;
            }
            case 207: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(Token.IDENTIFIER);
            }
          case 24: break;
          case 2: 
            { addToken(Token.LITERAL_NUMBER_FLOAT);
            }
          case 25: break;
          case 3: 
            { addNullToken(); return firstToken;
            }
          case 26: break;
          case 4: 
            { addToken(Token.WHITESPACE);
            }
          case 27: break;
          case 5: 
            { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
          case 28: break;
          case 6: 
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
          case 29: break;
          case 7: 
            { addToken(Token.SEPARATOR);
            }
          case 30: break;
          case 8: 
            { addToken(Token.OPERATOR);
            }
          case 31: break;
          case 9: 
            { 
            }
          case 32: break;
          case 10: 
            { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
          case 33: break;
          case 11: 
            { addToken(start,zzStartRead-1, Token.LITERAL_STRING_DOUBLE_QUOTE); return firstToken;
            }
          case 34: break;
          case 12: 
            { addToken(start,zzStartRead-1, Token.COMMENT_EOL); return firstToken;
            }
          case 35: break;
          case 13: 
            { addToken(Token.LITERAL_CHAR);
            }
          case 36: break;
          case 14: 
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          case 37: break;
          case 15: 
            { start = zzMarkedPos-2; yybegin(LONGSTRING);
            }
          case 38: break;
          case 16: 
            { start = zzMarkedPos-2; yybegin(LINECOMMENT);
            }
          case 39: break;
          case 17: 
            { addToken(Token.RESERVED_WORD);
            }
          case 40: break;
          case 18: 
            { addToken(Token.FUNCTION);
            }
          case 41: break;
          case 19: 
            { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
            }
          case 42: break;
          case 20: 
            { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          case 43: break;
          case 21: 
            { start = zzMarkedPos-4; yybegin(MLC);
            }
          case 44: break;
          case 22: 
            { addToken(Token.LITERAL_BOOLEAN);
            }
          case 45: break;
          case 23: 
            { addToken(Token.DATA_TYPE);
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
